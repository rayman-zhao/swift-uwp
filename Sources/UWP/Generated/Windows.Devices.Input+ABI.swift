// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CDevices_CInput_CIKeyboardCapabilities: WindowsFoundation.IID {
    .init(Data1: 0x3A3F9B56, Data2: 0x6798, Data3: 0x4BBC, Data4: ( 0x83,0x3E,0x0F,0x34,0xB1,0x7C,0x65,0xFF ))// 3A3F9B56-6798-4BBC-833E-0F34B17C65FF
}

private var IID___x_ABI_CWindows_CDevices_CInput_CIMouseCapabilities: WindowsFoundation.IID {
    .init(Data1: 0xBCA5E023, Data2: 0x7DD9, Data3: 0x4B6B, Data4: ( 0x9A,0x92,0x55,0xD4,0x3C,0xB3,0x8F,0x73 ))// BCA5E023-7DD9-4B6B-9A92-55D43CB38F73
}

private var IID___x_ABI_CWindows_CDevices_CInput_CIMouseDevice: WindowsFoundation.IID {
    .init(Data1: 0x88EDF458, Data2: 0xF2C8, Data3: 0x49F4, Data4: ( 0xBE,0x1F,0xC2,0x56,0xB3,0x88,0xBC,0x11 ))// 88EDF458-F2C8-49F4-BE1F-C256B388BC11
}

private var IID___x_ABI_CWindows_CDevices_CInput_CIMouseDeviceStatics: WindowsFoundation.IID {
    .init(Data1: 0x484A9045, Data2: 0x6D70, Data3: 0x49DB, Data4: ( 0x8E,0x68,0x46,0xFF,0xBD,0x17,0xD3,0x8D ))// 484A9045-6D70-49DB-8E68-46FFBD17D38D
}

private var IID___x_ABI_CWindows_CDevices_CInput_CIMouseEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xF625AA5D, Data2: 0x2354, Data3: 0x4CC7, Data4: ( 0x92,0x30,0x96,0x94,0x1C,0x96,0x9F,0xDE ))// F625AA5D-2354-4CC7-9230-96941C969FDE
}

private var IID___x_ABI_CWindows_CDevices_CInput_CIPenDevice: WindowsFoundation.IID {
    .init(Data1: 0x31856EBA, Data2: 0xA738, Data3: 0x5A8C, Data4: ( 0xB8,0xF6,0xF9,0x7E,0xF6,0x8D,0x18,0xEF ))// 31856EBA-A738-5A8C-B8F6-F97EF68D18EF
}

private var IID___x_ABI_CWindows_CDevices_CInput_CIPenDeviceStatics: WindowsFoundation.IID {
    .init(Data1: 0x9DFBBE01, Data2: 0x0966, Data3: 0x5180, Data4: ( 0xBC,0xB4,0xB8,0x50,0x60,0xE3,0x94,0x79 ))// 9DFBBE01-0966-5180-BCB4-B85060E39479
}

private var IID___x_ABI_CWindows_CDevices_CInput_CIPointerDevice: WindowsFoundation.IID {
    .init(Data1: 0x93C9BAFC, Data2: 0xEBCB, Data3: 0x467E, Data4: ( 0x82,0xC6,0x27,0x6F,0xEA,0xE3,0x6B,0x5A ))// 93C9BAFC-EBCB-467E-82C6-276FEAE36B5A
}

private var IID___x_ABI_CWindows_CDevices_CInput_CIPointerDevice2: WindowsFoundation.IID {
    .init(Data1: 0xF8A6D2A0, Data2: 0xC484, Data3: 0x489F, Data4: ( 0xAE,0x3E,0x30,0xD2,0xEE,0x1F,0xFD,0x3E ))// F8A6D2A0-C484-489F-AE3E-30D2EE1FFD3E
}

private var IID___x_ABI_CWindows_CDevices_CInput_CIPointerDeviceStatics: WindowsFoundation.IID {
    .init(Data1: 0xD8B89AA1, Data2: 0xD1C6, Data3: 0x416E, Data4: ( 0xBD,0x8D,0x57,0x90,0x91,0x4D,0xC5,0x63 ))// D8B89AA1-D1C6-416E-BD8D-5790914DC563
}

private var IID___x_ABI_CWindows_CDevices_CInput_CITouchCapabilities: WindowsFoundation.IID {
    .init(Data1: 0x20DD55F9, Data2: 0x13F1, Data3: 0x46C8, Data4: ( 0x92,0x85,0x2C,0x05,0xFA,0x3E,0xDA,0x6F ))// 20DD55F9-13F1-46C8-9285-2C05FA3EDA6F
}

public enum __ABI_Windows_Devices_Input {
    public class IKeyboardCapabilities: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CInput_CIKeyboardCapabilities }

        internal func get_KeyboardPresentImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIKeyboardCapabilities.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyboardPresent(pThis, &value))
            }
            return value
        }

    }

    public class IMouseCapabilities: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CInput_CIMouseCapabilities }

        internal func get_MousePresentImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIMouseCapabilities.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MousePresent(pThis, &value))
            }
            return value
        }

        internal func get_VerticalWheelPresentImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIMouseCapabilities.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalWheelPresent(pThis, &value))
            }
            return value
        }

        internal func get_HorizontalWheelPresentImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIMouseCapabilities.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalWheelPresent(pThis, &value))
            }
            return value
        }

        internal func get_SwapButtonsImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIMouseCapabilities.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SwapButtons(pThis, &value))
            }
            return value
        }

        internal func get_NumberOfButtonsImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIMouseCapabilities.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NumberOfButtons(pThis, &value))
            }
            return value
        }

    }

    public class IMouseDevice: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CInput_CIMouseDevice }

        internal func add_MouseMovedImpl(_ handler: TypedEventHandler<UWP.MouseDevice?, UWP.MouseEventArgs?>?) throws -> EventRegistrationToken {
            var cookie: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CInput__CMouseDevice___x_ABI_CWindows__CDevices__CInput__CMouseEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIMouseDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_MouseMoved(pThis, _handler, &cookie))
            }
            return cookie
        }

        internal func remove_MouseMovedImpl(_ cookie: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIMouseDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_MouseMoved(pThis, cookie))
            }
        }

    }

    public class IMouseDeviceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CInput_CIMouseDeviceStatics }

        internal func GetForCurrentViewImpl() throws -> UWP.MouseDevice? {
            let (mouseDevice) = try ComPtrs.initialize { mouseDeviceAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIMouseDeviceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForCurrentView(pThis, &mouseDeviceAbi))
                }
            }
            return .from(abi: mouseDevice)
        }

    }

    public class IMouseEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CInput_CIMouseEventArgs }

        internal func get_MouseDeltaImpl() throws -> UWP.MouseDelta {
            var value: __x_ABI_CWindows_CDevices_CInput_CMouseDelta = .init()
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIMouseEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MouseDelta(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IPenDevice: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CInput_CIPenDevice }

        internal func get_PenIdImpl() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPenDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PenId(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IPenDeviceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CInput_CIPenDeviceStatics }

        internal func GetFromPointerIdImpl(_ pointerId: UInt32) throws -> UWP.PenDevice? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPenDeviceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFromPointerId(pThis, pointerId, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IPointerDevice: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CInput_CIPointerDevice }

        internal func get_PointerDeviceTypeImpl() throws -> UWP.PointerDeviceType {
            var value: __x_ABI_CWindows_CDevices_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal func get_IsIntegratedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsIntegrated(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_MaxContactsImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxContacts(pThis, &value))
            }
            return value
        }

        internal func get_PhysicalDeviceRectImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PhysicalDeviceRect(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_ScreenRectImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScreenRect(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_SupportedUsagesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.PointerDeviceUsage>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDevice.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedUsages(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.unwrapFrom(abi: value)
        }

    }

    public class IPointerDevice2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CInput_CIPointerDevice2 }

        internal func get_MaxPointersWithZDistanceImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDevice2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxPointersWithZDistance(pThis, &value))
            }
            return value
        }

    }

    public class IPointerDeviceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CInput_CIPointerDeviceStatics }

        internal func GetPointerDeviceImpl(_ pointerId: UInt32) throws -> UWP.PointerDevice? {
            let (pointerDevice) = try ComPtrs.initialize { pointerDeviceAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDeviceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPointerDevice(pThis, pointerId, &pointerDeviceAbi))
                }
            }
            return .from(abi: pointerDevice)
        }

        internal func GetPointerDevicesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.PointerDevice?>? {
            let (pointerDevices) = try ComPtrs.initialize { pointerDevicesAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CIPointerDeviceStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPointerDevices(pThis, &pointerDevicesAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.unwrapFrom(abi: pointerDevices)
        }

    }

    public class ITouchCapabilities: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CInput_CITouchCapabilities }

        internal func get_TouchPresentImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CITouchCapabilities.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TouchPresent(pThis, &value))
            }
            return value
        }

        internal func get_ContactsImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CInput_CITouchCapabilities.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Contacts(pThis, &value))
            }
            return value
        }

    }

}
extension __x_ABI_CWindows_CDevices_CInput_CMouseDelta {
        public static func from(swift: UWP.MouseDelta) -> __x_ABI_CWindows_CDevices_CInput_CMouseDelta {
            .init(X: swift.x, Y: swift.y)
        }
    }
    extension __x_ABI_CWindows_CDevices_CInput_CPointerDeviceUsage {
        public static func from(swift: UWP.PointerDeviceUsage) -> __x_ABI_CWindows_CDevices_CInput_CPointerDeviceUsage {
            .init(UsagePage: swift.usagePage, Usage: swift.usage, MinLogical: swift.minLogical, MaxLogical: swift.maxLogical, MinPhysical: swift.minPhysical, MaxPhysical: swift.maxPhysical, Unit: swift.unit, PhysicalMultiplier: swift.physicalMultiplier)
        }
    }
    