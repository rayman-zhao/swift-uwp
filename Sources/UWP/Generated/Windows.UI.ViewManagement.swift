// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.viewsizepreference)
public typealias ViewSizePreference = __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.activationviewswitcher)
public final class ActivationViewSwitcher : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_ViewManagement.IActivationViewSwitcher
    private typealias CABI = __x_ABI_CWindows_CUI_CViewManagement_CIActivationViewSwitcher
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CViewManagement_CIActivationViewSwitcher>?) -> ActivationViewSwitcher? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.activationviewswitcher.showasstandaloneasync)
    public func showAsStandaloneAsync(_ viewId: Int32) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.ShowAsStandaloneAsyncImpl(viewId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.activationviewswitcher.showasstandaloneasync)
    public func showAsStandaloneAsync(_ viewId: Int32, _ sizePreference: ViewSizePreference) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.ShowAsStandaloneWithSizePreferenceAsyncImpl(viewId, sizePreference)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.viewmanagement.activationviewswitcher.isviewpresentedonactivationvirtualdesktop)
    public func isViewPresentedOnActivationVirtualDesktop(_ viewId: Int32) throws -> Bool {
        try _default.IsViewPresentedOnActivationVirtualDesktopImpl(viewId)
    }

    deinit {
        _default = nil
    }
}

extension UWP.ViewSizePreference {
    public static var `default` : UWP.ViewSizePreference {
        __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference_Default
    }
    public static var useLess : UWP.ViewSizePreference {
        __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference_UseLess
    }
    public static var useHalf : UWP.ViewSizePreference {
        __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference_UseHalf
    }
    public static var useMore : UWP.ViewSizePreference {
        __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference_UseMore
    }
    public static var useMinimum : UWP.ViewSizePreference {
        __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference_UseMinimum
    }
    public static var useNone : UWP.ViewSizePreference {
        __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference_UseNone
    }
    public static var custom : UWP.ViewSizePreference {
        __x_ABI_CWindows_CUI_CViewManagement_CViewSizePreference_Custom
    }
}
extension UWP.ViewSizePreference: @retroactive Hashable, @retroactive Codable {}

