// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties: WindowsFoundation.IID {
    .init(Data1: 0x62BC7A16, Data2: 0x005C, Data3: 0x4B3B, Data4: ( 0x8A,0x0B,0x0A,0x09,0x0E,0x96,0x87,0xF3 ))// 62BC7A16-005C-4B3B-8A0B-0A090E9687F3
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties2: WindowsFoundation.IID {
    .init(Data1: 0xC45D54DA, Data2: 0x80BD, Data3: 0x4C23, Data4: ( 0x80,0xD5,0x72,0xD4,0xA1,0x81,0xE8,0x94 ))// C45D54DA-80BD-4C23-80D5-72D4A181E894
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties3: WindowsFoundation.IID {
    .init(Data1: 0x87600341, Data2: 0x748C, Data3: 0x4F8D, Data4: ( 0xB0,0xFD,0x10,0xCA,0xF0,0x8F,0xF0,0x87 ))// 87600341-748C-4F8D-B0FD-10CAF08FF087
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingPropertiesStatics: WindowsFoundation.IID {
    .init(Data1: 0x0CAD332C, Data2: 0xEBE9, Data3: 0x4527, Data4: ( 0xB3,0x6D,0xE4,0x2A,0x13,0xCF,0x38,0xDB ))// 0CAD332C-EBE9-4527-B36D-E42A13CF38DB
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingPropertiesStatics2: WindowsFoundation.IID {
    .init(Data1: 0x7489316F, Data2: 0x77A0, Data3: 0x433D, Data4: ( 0x8E,0xD5,0x40,0x40,0x28,0x0E,0x86,0x65 ))// 7489316F-77A0-433D-8ED5-4040280E8665
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingPropertiesWithFormatUserData: WindowsFoundation.IID {
    .init(Data1: 0x98F10D79, Data2: 0x13EA, Data3: 0x49FF, Data4: ( 0xBE,0x70,0x26,0x73,0xDB,0x69,0x70,0x2C ))// 98F10D79-13EA-49FF-BE70-2673DB69702C
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIContainerEncodingProperties: WindowsFoundation.IID {
    .init(Data1: 0x59AC2A57, Data2: 0xB32A, Data3: 0x479E, Data4: ( 0x8A,0x61,0x4B,0x7F,0x2E,0x9E,0x7E,0xA0 ))// 59AC2A57-B32A-479E-8A61-4B7F2E9E7EA0
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIContainerEncodingProperties2: WindowsFoundation.IID {
    .init(Data1: 0xB272C029, Data2: 0xAE26, Data3: 0x4819, Data4: ( 0xBA,0xAD,0xAD,0x7A,0x49,0xB0,0xA8,0x76 ))// B272C029-AE26-4819-BAAD-AD7A49B0A876
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile: WindowsFoundation.IID {
    .init(Data1: 0xE7DBF5A8, Data2: 0x1DB9, Data3: 0x4783, Data4: ( 0x87,0x6B,0x3D,0xFE,0x12,0xAC,0xFD,0xB3 ))// E7DBF5A8-1DB9-4783-876B-3DFE12ACFDB3
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile2: WindowsFoundation.IID {
    .init(Data1: 0x349B3E0A, Data2: 0x4035, Data3: 0x488E, Data4: ( 0x98,0x77,0x85,0x63,0x28,0x65,0xED,0x10 ))// 349B3E0A-4035-488E-9877-85632865ED10
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile3: WindowsFoundation.IID {
    .init(Data1: 0xBA6EBE88, Data2: 0x7570, Data3: 0x4E69, Data4: ( 0xAC,0xCF,0x56,0x11,0xAD,0x01,0x5F,0x88 ))// BA6EBE88-7570-4E69-ACCF-5611AD015F88
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics: WindowsFoundation.IID {
    .init(Data1: 0x197F352C, Data2: 0x2EDE, Data3: 0x4A45, Data4: ( 0xA8,0x96,0x81,0x7A,0x48,0x54,0xF8,0xFE ))// 197F352C-2EDE-4A45-A896-817A4854F8FE
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics2: WindowsFoundation.IID {
    .init(Data1: 0xCE8DE74F, Data2: 0x6AF4, Data3: 0x4288, Data4: ( 0x8F,0xE2,0x79,0xAD,0xF1,0xF7,0x9A,0x43 ))// CE8DE74F-6AF4-4288-8FE2-79ADF1F79A43
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics3: WindowsFoundation.IID {
    .init(Data1: 0x90DAC5AA, Data2: 0xCF76, Data3: 0x4294, Data4: ( 0xA9,0xED,0x1A,0x14,0x20,0xF5,0x1F,0x6B ))// 90DAC5AA-CF76-4294-A9ED-1A1420F51F6B
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties: WindowsFoundation.IID {
    .init(Data1: 0xB4002AF6, Data2: 0xACD4, Data3: 0x4E5A, Data4: ( 0xA2,0x4B,0x5D,0x74,0x98,0xA8,0xB8,0xC4 ))// B4002AF6-ACD4-4E5A-A24B-5D7498A8B8C4
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIMediaRatio: WindowsFoundation.IID {
    .init(Data1: 0xD2D0FEE5, Data2: 0x8929, Data3: 0x401D, Data4: ( 0xAC,0x78,0x7D,0x35,0x7E,0x37,0x81,0x63 ))// D2D0FEE5-8929-401D-AC78-7D357E378163
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CITimedMetadataEncodingProperties: WindowsFoundation.IID {
    .init(Data1: 0x51CD30D3, Data2: 0xD690, Data3: 0x4CFA, Data4: ( 0x97,0xF4,0x4A,0x39,0x8E,0x9D,0xB4,0x20 ))// 51CD30D3-D690-4CFA-97F4-4A398E9DB420
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties: WindowsFoundation.IID {
    .init(Data1: 0x76EE6C9A, Data2: 0x37C2, Data3: 0x4F2A, Data4: ( 0x88,0x0A,0x12,0x82,0xBB,0xB4,0x37,0x3D ))// 76EE6C9A-37C2-4F2A-880A-1282BBB4373D
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties2: WindowsFoundation.IID {
    .init(Data1: 0xF743A1EF, Data2: 0xD465, Data3: 0x4290, Data4: ( 0xA9,0x4B,0xEF,0x0F,0x15,0x28,0xF8,0xE3 ))// F743A1EF-D465-4290-A94B-EF0F1528F8E3
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties3: WindowsFoundation.IID {
    .init(Data1: 0x386BCDC4, Data2: 0x873A, Data3: 0x479F, Data4: ( 0xB3,0xEB,0x56,0xC1,0xFC,0xBE,0xC6,0xD7 ))// 386BCDC4-873A-479F-B3EB-56C1FCBEC6D7
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties4: WindowsFoundation.IID {
    .init(Data1: 0x724EF014, Data2: 0xC10C, Data3: 0x40F2, Data4: ( 0x9D,0x72,0x3E,0xE1,0x3B,0x45,0xFA,0x8E ))// 724EF014-C10C-40F2-9D72-3EE13B45FA8E
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties5: WindowsFoundation.IID {
    .init(Data1: 0x4959080F, Data2: 0x272F, Data3: 0x4ECE, Data4: ( 0xA4,0xDF,0xC0,0xCC,0xDB,0x33,0xD8,0x40 ))// 4959080F-272F-4ECE-A4DF-C0CCDB33D840
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingPropertiesStatics: WindowsFoundation.IID {
    .init(Data1: 0x3CE14D44, Data2: 0x1DC5, Data3: 0x43DB, Data4: ( 0x9F,0x38,0xEB,0xEB,0xF9,0x01,0x52,0xCB ))// 3CE14D44-1DC5-43DB-9F38-EBEBF90152CB
}

private var IID___x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingPropertiesStatics2: WindowsFoundation.IID {
    .init(Data1: 0xCF1EBD5D, Data2: 0x49FE, Data3: 0x4D00, Data4: ( 0xB5,0x9A,0xCF,0xA4,0xDF,0xC5,0x19,0x44 ))// CF1EBD5D-49FE-4D00-B59A-CFA4DFC51944
}

public enum __ABI_Windows_Media_MediaProperties {
    public class IAudioEncodingProperties: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties }

        internal func put_BitrateImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Bitrate(pThis, value))
            }
        }

        internal func get_BitrateImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bitrate(pThis, &value))
            }
            return value
        }

        internal func put_ChannelCountImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ChannelCount(pThis, value))
            }
        }

        internal func get_ChannelCountImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChannelCount(pThis, &value))
            }
            return value
        }

        internal func put_SampleRateImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SampleRate(pThis, value))
            }
        }

        internal func get_SampleRateImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SampleRate(pThis, &value))
            }
            return value
        }

        internal func put_BitsPerSampleImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BitsPerSample(pThis, value))
            }
        }

        internal func get_BitsPerSampleImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BitsPerSample(pThis, &value))
            }
            return value
        }

    }

    public class IAudioEncodingProperties2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties2 }

        internal func get_IsSpatialImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSpatial(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IAudioEncodingProperties3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties3 }

        internal func CopyImpl() throws -> UWP.AudioEncodingProperties? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Copy(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IAudioEncodingPropertiesStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingPropertiesStatics }

        internal func CreateAacImpl(_ sampleRate: UInt32, _ channelCount: UInt32, _ bitrate: UInt32) throws -> UWP.AudioEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingPropertiesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAac(pThis, sampleRate, channelCount, bitrate, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateAacAdtsImpl(_ sampleRate: UInt32, _ channelCount: UInt32, _ bitrate: UInt32) throws -> UWP.AudioEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingPropertiesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAacAdts(pThis, sampleRate, channelCount, bitrate, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateMp3Impl(_ sampleRate: UInt32, _ channelCount: UInt32, _ bitrate: UInt32) throws -> UWP.AudioEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingPropertiesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateMp3(pThis, sampleRate, channelCount, bitrate, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreatePcmImpl(_ sampleRate: UInt32, _ channelCount: UInt32, _ bitsPerSample: UInt32) throws -> UWP.AudioEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingPropertiesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePcm(pThis, sampleRate, channelCount, bitsPerSample, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateWmaImpl(_ sampleRate: UInt32, _ channelCount: UInt32, _ bitrate: UInt32) throws -> UWP.AudioEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingPropertiesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWma(pThis, sampleRate, channelCount, bitrate, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IAudioEncodingPropertiesStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingPropertiesStatics2 }

        internal func CreateAlacImpl(_ sampleRate: UInt32, _ channelCount: UInt32, _ bitsPerSample: UInt32) throws -> UWP.AudioEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingPropertiesStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAlac(pThis, sampleRate, channelCount, bitsPerSample, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateFlacImpl(_ sampleRate: UInt32, _ channelCount: UInt32, _ bitsPerSample: UInt32) throws -> UWP.AudioEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingPropertiesStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFlac(pThis, sampleRate, channelCount, bitsPerSample, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IAudioEncodingPropertiesWithFormatUserData: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingPropertiesWithFormatUserData }

    }

    public class IContainerEncodingProperties: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIContainerEncodingProperties }

    }

    public class IContainerEncodingProperties2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIContainerEncodingProperties2 }

        internal func CopyImpl() throws -> UWP.ContainerEncodingProperties? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIContainerEncodingProperties2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Copy(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IMediaEncodingProfile: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile }

        internal func put_AudioImpl(_ value: UWP.AudioEncodingProperties?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Audio(pThis, RawPointer(value)))
            }
        }

        internal func get_AudioImpl() throws -> UWP.AudioEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Audio(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_VideoImpl(_ value: UWP.VideoEncodingProperties?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Video(pThis, RawPointer(value)))
            }
        }

        internal func get_VideoImpl() throws -> UWP.VideoEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Video(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ContainerImpl(_ value: UWP.ContainerEncodingProperties?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Container(pThis, RawPointer(value)))
            }
        }

        internal func get_ContainerImpl() throws -> UWP.ContainerEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Container(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaEncodingProfile2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile2 }

        internal func SetAudioTracksImpl(_ value: WindowsFoundation.AnyIIterable<UWP.AudioStreamDescriptor?>?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CAudioStreamDescriptorWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAudioTracks(pThis, _value))
            }
        }

        internal func GetAudioTracksImpl() throws -> WindowsFoundation.AnyIVector<UWP.AudioStreamDescriptor?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAudioTracks(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CAudioStreamDescriptorWrapper.unwrapFrom(abi: value)
        }

        internal func SetVideoTracksImpl(_ value: WindowsFoundation.AnyIIterable<UWP.VideoStreamDescriptor?>?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CVideoStreamDescriptorWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetVideoTracks(pThis, _value))
            }
        }

        internal func GetVideoTracksImpl() throws -> WindowsFoundation.AnyIVector<UWP.VideoStreamDescriptor?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetVideoTracks(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CVideoStreamDescriptorWrapper.unwrapFrom(abi: value)
        }

    }

    public class IMediaEncodingProfile3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile3 }

        internal func SetTimedMetadataTracksImpl(_ value: WindowsFoundation.AnyIIterable<UWP.TimedMetadataStreamDescriptor?>?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataStreamDescriptorWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetTimedMetadataTracks(pThis, _value))
            }
        }

        internal func GetTimedMetadataTracksImpl() throws -> WindowsFoundation.AnyIVector<UWP.TimedMetadataStreamDescriptor?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfile3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetTimedMetadataTracks(pThis, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CCore__CTimedMetadataStreamDescriptorWrapper.unwrapFrom(abi: result)
        }

    }

    public class IMediaEncodingProfileStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics }

        internal func CreateM4aImpl(_ quality: UWP.AudioEncodingQuality) throws -> UWP.MediaEncodingProfile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateM4a(pThis, quality, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateMp3Impl(_ quality: UWP.AudioEncodingQuality) throws -> UWP.MediaEncodingProfile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateMp3(pThis, quality, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateWmaImpl(_ quality: UWP.AudioEncodingQuality) throws -> UWP.MediaEncodingProfile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWma(pThis, quality, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateMp4Impl(_ quality: UWP.VideoEncodingQuality) throws -> UWP.MediaEncodingProfile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateMp4(pThis, quality, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateWmvImpl(_ quality: UWP.VideoEncodingQuality) throws -> UWP.MediaEncodingProfile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWmv(pThis, quality, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateFromFileAsyncImpl(_ file: UWP.AnyIStorageFile?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.MediaEncodingProfile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let fileWrapper = __ABI_Windows_Storage.IStorageFileWrapper(file)
                let _file = try! fileWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromFileAsync(pThis, _file, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CMediaProperties__CMediaEncodingProfileWrapper.unwrapFrom(abi: operation)
        }

        internal func CreateFromStreamAsyncImpl(_ stream: UWP.AnyIRandomAccessStream?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.MediaEncodingProfile?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromStreamAsync(pThis, _stream, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CMediaProperties__CMediaEncodingProfileWrapper.unwrapFrom(abi: operation)
        }

    }

    public class IMediaEncodingProfileStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics2 }

        internal func CreateWavImpl(_ quality: UWP.AudioEncodingQuality) throws -> UWP.MediaEncodingProfile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWav(pThis, quality, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateAviImpl(_ quality: UWP.VideoEncodingQuality) throws -> UWP.MediaEncodingProfile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAvi(pThis, quality, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaEncodingProfileStatics3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics3 }

        internal func CreateAlacImpl(_ quality: UWP.AudioEncodingQuality) throws -> UWP.MediaEncodingProfile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAlac(pThis, quality, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateFlacImpl(_ quality: UWP.AudioEncodingQuality) throws -> UWP.MediaEncodingProfile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFlac(pThis, quality, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateHevcImpl(_ quality: UWP.VideoEncodingQuality) throws -> UWP.MediaEncodingProfile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProfileStatics3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHevc(pThis, quality, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMediaEncodingProperties: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties }

        open func get_PropertiesImpl() throws -> UWP.MediaPropertySet? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Properties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        open func get_TypeImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_SubtypeImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Subtype(pThis, _value.get()))
            }
        }

        open func get_SubtypeImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Subtype(pThis, &value))
            }
            return .init(from: value)
        }

    }

    internal static var IMediaEncodingPropertiesVTable: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingPropertiesVtbl = .init(
        QueryInterface: { IMediaEncodingPropertiesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IMediaEncodingPropertiesWrapper.addRef($0) },
        Release: { IMediaEncodingPropertiesWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Media_MediaProperties.IMediaEncodingPropertiesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Media.MediaProperties.IMediaEncodingProperties").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Properties: {
            guard let __unwrapped__instance = IMediaEncodingPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.properties
            value?.copyTo($1)
            return S_OK
        },

        get_Type: {
            guard let __unwrapped__instance = IMediaEncodingPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.type
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        put_Subtype: {
            guard let __unwrapped__instance = IMediaEncodingPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            __unwrapped__instance.subtype = value
            return S_OK
        },

        get_Subtype: {
            guard let __unwrapped__instance = IMediaEncodingPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.subtype
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        }
    )

    public typealias IMediaEncodingPropertiesWrapper = InterfaceWrapperBase<__IMPL_Windows_Media_MediaProperties.IMediaEncodingPropertiesBridge>
    public class IMediaRatio: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIMediaRatio }

        internal func put_NumeratorImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaRatio.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Numerator(pThis, value))
            }
        }

        internal func get_NumeratorImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaRatio.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Numerator(pThis, &value))
            }
            return value
        }

        internal func put_DenominatorImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaRatio.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Denominator(pThis, value))
            }
        }

        internal func get_DenominatorImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaRatio.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Denominator(pThis, &value))
            }
            return value
        }

    }

    public class ITimedMetadataEncodingProperties: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CITimedMetadataEncodingProperties }

        internal func CopyImpl() throws -> UWP.TimedMetadataEncodingProperties? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CITimedMetadataEncodingProperties.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Copy(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IVideoEncodingProperties: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties }

        internal func put_BitrateImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Bitrate(pThis, value))
            }
        }

        internal func get_BitrateImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bitrate(pThis, &value))
            }
            return value
        }

        internal func put_WidthImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Width(pThis, value))
            }
        }

        internal func get_WidthImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Width(pThis, &value))
            }
            return value
        }

        internal func put_HeightImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Height(pThis, value))
            }
        }

        internal func get_HeightImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Height(pThis, &value))
            }
            return value
        }

        internal func get_FrameRateImpl() throws -> UWP.MediaRatio? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FrameRate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_PixelAspectRatioImpl() throws -> UWP.MediaRatio? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelAspectRatio(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IVideoEncodingProperties2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties2 }

        internal func put_ProfileIdImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProfileId(pThis, value))
            }
        }

        internal func get_ProfileIdImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProfileId(pThis, &value))
            }
            return value
        }

    }

    public class IVideoEncodingProperties3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties3 }

        internal func get_StereoscopicVideoPackingModeImpl() throws -> UWP.StereoscopicVideoPackingMode {
            var value: __x_ABI_CWindows_CMedia_CMediaProperties_CStereoscopicVideoPackingMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StereoscopicVideoPackingMode(pThis, &value))
            }
            return value
        }

    }

    public class IVideoEncodingProperties4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties4 }

        internal func get_SphericalVideoFrameFormatImpl() throws -> UWP.SphericalVideoFrameFormat {
            var value: __x_ABI_CWindows_CMedia_CMediaProperties_CSphericalVideoFrameFormat = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SphericalVideoFrameFormat(pThis, &value))
            }
            return value
        }

    }

    public class IVideoEncodingProperties5: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties5 }

        internal func CopyImpl() throws -> UWP.VideoEncodingProperties? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties5.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Copy(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IVideoEncodingPropertiesStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingPropertiesStatics }

        internal func CreateH264Impl() throws -> UWP.VideoEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingPropertiesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateH264(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateMpeg2Impl() throws -> UWP.VideoEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingPropertiesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateMpeg2(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateUncompressedImpl(_ subtype: String, _ width: UInt32, _ height: UInt32) throws -> UWP.VideoEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _subtype = try! HString(subtype)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingPropertiesStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateUncompressed(pThis, _subtype.get(), width, height, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IVideoEncodingPropertiesStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingPropertiesStatics2 }

        internal func CreateHevcImpl() throws -> UWP.VideoEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingPropertiesStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHevc(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

}
