// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodevicenodecreationstatus)
public typealias AudioDeviceNodeCreationStatus = __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofilenodecreationstatus)
public typealias AudioFileNodeCreationStatus = __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiographcreationstatus)
public typealias AudioGraphCreationStatus = __x_ABI_CWindows_CMedia_CAudio_CAudioGraphCreationStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiographunrecoverableerror)
public typealias AudioGraphUnrecoverableError = __x_ABI_CWindows_CMedia_CAudio_CAudioGraphUnrecoverableError
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitterdecaykind)
public typealias AudioNodeEmitterDecayKind = __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterDecayKind
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemittersettings)
public typealias AudioNodeEmitterSettings = __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterSettings
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemittershapekind)
public typealias AudioNodeEmitterShapeKind = __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterShapeKind
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnodecreationstatus)
public typealias MediaSourceAudioInputNodeCreationStatus = __x_ABI_CWindows_CMedia_CAudio_CMediaSourceAudioInputNodeCreationStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mixedrealityspatialaudioformatpolicy)
public typealias MixedRealitySpatialAudioFormatPolicy = __x_ABI_CWindows_CMedia_CAudio_CMixedRealitySpatialAudioFormatPolicy
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.quantumsizeselectionmode)
public typealias QuantumSizeSelectionMode = __x_ABI_CWindows_CMedia_CAudio_CQuantumSizeSelectionMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.setdefaultspatialaudioformatstatus)
public typealias SetDefaultSpatialAudioFormatStatus = __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudiomodel)
public typealias SpatialAudioModel = __x_ABI_CWindows_CMedia_CAudio_CSpatialAudioModel
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceinputnode)
public final class AudioDeviceInputNode : WinRTClass, WindowsFoundation.IClosable, IAudioNode, IAudioInputNode, IAudioInputNode2 {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioDeviceInputNode
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode>?) -> AudioDeviceInputNode? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceinputnode.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IAudioNode: __ABI_Windows_Media_Audio.IAudioNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceinputnode.start)
    public func start() throws {
        try _IAudioNode.StartImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceinputnode.stop)
    public func stop() throws {
        try _IAudioNode.StopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceinputnode.reset)
    public func reset() throws {
        try _IAudioNode.ResetImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceinputnode.disableeffectsbydefinition)
    public func disableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws {
        try _IAudioNode.DisableEffectsByDefinitionImpl(definition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceinputnode.enableeffectsbydefinition)
    public func enableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws {
        try _IAudioNode.EnableEffectsByDefinitionImpl(definition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceinputnode.consumeinput)
    public var consumeInput : Bool {
        get { try! _IAudioNode.get_ConsumeInputImpl() }
        set { try! _IAudioNode.put_ConsumeInputImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceinputnode.effectdefinitions)
    public var effectDefinitions : WindowsFoundation.AnyIVector<UWP.AnyIAudioEffectDefinition?>! {
        get { try! _IAudioNode.get_EffectDefinitionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceinputnode.encodingproperties)
    public var encodingProperties : UWP.AudioEncodingProperties! {
        get { try! _IAudioNode.get_EncodingPropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceinputnode.outgoinggain)
    public var outgoingGain : Double {
        get { try! _IAudioNode.get_OutgoingGainImpl() }
        set { try! _IAudioNode.put_OutgoingGainImpl(newValue) }
    }

    private lazy var _IAudioInputNode: __ABI_Windows_Media_Audio.IAudioInputNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceinputnode.addoutgoingconnection)
    public func addOutgoingConnection(_ destination: AnyIAudioNode!) throws {
        try _IAudioInputNode.AddOutgoingConnectionImpl(destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceinputnode.addoutgoingconnection)
    public func addOutgoingConnection(_ destination: AnyIAudioNode!, _ gain: Double) throws {
        try _IAudioInputNode.AddOutgoingConnectionWithGainImpl(destination, gain)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceinputnode.removeoutgoingconnection)
    public func removeOutgoingConnection(_ destination: AnyIAudioNode!) throws {
        try _IAudioInputNode.RemoveOutgoingConnectionImpl(destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceinputnode.outgoingconnections)
    public var outgoingConnections : WindowsFoundation.AnyIVectorView<AudioGraphConnection?>! {
        get { try! _IAudioInputNode.get_OutgoingConnectionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceinputnode.device)
    public var device : UWP.DeviceInformation! {
        get { try! _default.get_DeviceImpl() }
    }

    private lazy var _IAudioInputNode2: __ABI_Windows_Media_Audio.IAudioInputNode2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceinputnode.emitter)
    public var emitter : AudioNodeEmitter! {
        get { try! _IAudioInputNode2.get_EmitterImpl() }
    }

    deinit {
        _IClosable = nil
        _IAudioNode = nil
        _IAudioInputNode = nil
        _default = nil
        _IAudioInputNode2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceoutputnode)
public final class AudioDeviceOutputNode : WinRTClass, WindowsFoundation.IClosable, IAudioNode, IAudioNodeWithListener {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioDeviceOutputNode
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode>?) -> AudioDeviceOutputNode? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceoutputnode.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IAudioNode: __ABI_Windows_Media_Audio.IAudioNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceoutputnode.start)
    public func start() throws {
        try _IAudioNode.StartImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceoutputnode.stop)
    public func stop() throws {
        try _IAudioNode.StopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceoutputnode.reset)
    public func reset() throws {
        try _IAudioNode.ResetImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceoutputnode.disableeffectsbydefinition)
    public func disableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws {
        try _IAudioNode.DisableEffectsByDefinitionImpl(definition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceoutputnode.enableeffectsbydefinition)
    public func enableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws {
        try _IAudioNode.EnableEffectsByDefinitionImpl(definition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceoutputnode.consumeinput)
    public var consumeInput : Bool {
        get { try! _IAudioNode.get_ConsumeInputImpl() }
        set { try! _IAudioNode.put_ConsumeInputImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceoutputnode.effectdefinitions)
    public var effectDefinitions : WindowsFoundation.AnyIVector<UWP.AnyIAudioEffectDefinition?>! {
        get { try! _IAudioNode.get_EffectDefinitionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceoutputnode.encodingproperties)
    public var encodingProperties : UWP.AudioEncodingProperties! {
        get { try! _IAudioNode.get_EncodingPropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceoutputnode.outgoinggain)
    public var outgoingGain : Double {
        get { try! _IAudioNode.get_OutgoingGainImpl() }
        set { try! _IAudioNode.put_OutgoingGainImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceoutputnode.device)
    public var device : UWP.DeviceInformation! {
        get { try! _default.get_DeviceImpl() }
    }

    private lazy var _IAudioNodeWithListener: __ABI_Windows_Media_Audio.IAudioNodeWithListener! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiodeviceoutputnode.listener)
    public var listener : AudioNodeListener! {
        get { try! _IAudioNodeWithListener.get_ListenerImpl() }
        set { try! _IAudioNodeWithListener.put_ListenerImpl(newValue) }
    }

    deinit {
        _IClosable = nil
        _IAudioNode = nil
        _default = nil
        _IAudioNodeWithListener = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode)
public final class AudioFileInputNode : WinRTClass, WindowsFoundation.IClosable, IAudioNode, IAudioInputNode, IAudioInputNode2 {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioFileInputNode
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode>?) -> AudioFileInputNode? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IAudioNode: __ABI_Windows_Media_Audio.IAudioNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.start)
    public func start() throws {
        try _IAudioNode.StartImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.stop)
    public func stop() throws {
        try _IAudioNode.StopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.reset)
    public func reset() throws {
        try _IAudioNode.ResetImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.disableeffectsbydefinition)
    public func disableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws {
        try _IAudioNode.DisableEffectsByDefinitionImpl(definition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.enableeffectsbydefinition)
    public func enableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws {
        try _IAudioNode.EnableEffectsByDefinitionImpl(definition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.consumeinput)
    public var consumeInput : Bool {
        get { try! _IAudioNode.get_ConsumeInputImpl() }
        set { try! _IAudioNode.put_ConsumeInputImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.effectdefinitions)
    public var effectDefinitions : WindowsFoundation.AnyIVector<UWP.AnyIAudioEffectDefinition?>! {
        get { try! _IAudioNode.get_EffectDefinitionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.encodingproperties)
    public var encodingProperties : UWP.AudioEncodingProperties! {
        get { try! _IAudioNode.get_EncodingPropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.outgoinggain)
    public var outgoingGain : Double {
        get { try! _IAudioNode.get_OutgoingGainImpl() }
        set { try! _IAudioNode.put_OutgoingGainImpl(newValue) }
    }

    private lazy var _IAudioInputNode: __ABI_Windows_Media_Audio.IAudioInputNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.addoutgoingconnection)
    public func addOutgoingConnection(_ destination: AnyIAudioNode!) throws {
        try _IAudioInputNode.AddOutgoingConnectionImpl(destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.addoutgoingconnection)
    public func addOutgoingConnection(_ destination: AnyIAudioNode!, _ gain: Double) throws {
        try _IAudioInputNode.AddOutgoingConnectionWithGainImpl(destination, gain)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.removeoutgoingconnection)
    public func removeOutgoingConnection(_ destination: AnyIAudioNode!) throws {
        try _IAudioInputNode.RemoveOutgoingConnectionImpl(destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.outgoingconnections)
    public var outgoingConnections : WindowsFoundation.AnyIVectorView<AudioGraphConnection?>! {
        get { try! _IAudioInputNode.get_OutgoingConnectionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.seek)
    public func seek(_ position: WindowsFoundation.TimeSpan) throws {
        try _default.SeekImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.duration)
    public var duration : WindowsFoundation.TimeSpan {
        get { try! _default.get_DurationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.endtime)
    public var endTime : WindowsFoundation.TimeSpan? {
        get { try! _default.get_EndTimeImpl() }
        set { try! _default.put_EndTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.loopcount)
    public var loopCount : Int32? {
        get { try! _default.get_LoopCountImpl() }
        set { try! _default.put_LoopCountImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.playbackspeedfactor)
    public var playbackSpeedFactor : Double {
        get { try! _default.get_PlaybackSpeedFactorImpl() }
        set { try! _default.put_PlaybackSpeedFactorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.position)
    public var position : WindowsFoundation.TimeSpan {
        get { try! _default.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.sourcefile)
    public var sourceFile : UWP.StorageFile! {
        get { try! _default.get_SourceFileImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.starttime)
    public var startTime : WindowsFoundation.TimeSpan? {
        get { try! _default.get_StartTimeImpl() }
        set { try! _default.put_StartTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.filecompleted)
    public lazy var fileCompleted : Event<TypedEventHandler<AudioFileInputNode?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_FileCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_FileCompletedImpl($0)
       }
      )
    }()

    private lazy var _IAudioInputNode2: __ABI_Windows_Media_Audio.IAudioInputNode2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileinputnode.emitter)
    public var emitter : AudioNodeEmitter! {
        get { try! _IAudioInputNode2.get_EmitterImpl() }
    }

    deinit {
        _IClosable = nil
        _IAudioNode = nil
        _IAudioInputNode = nil
        _default = nil
        _IAudioInputNode2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileoutputnode)
public final class AudioFileOutputNode : WinRTClass, WindowsFoundation.IClosable, IAudioNode {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioFileOutputNode
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode>?) -> AudioFileOutputNode? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileoutputnode.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IAudioNode: __ABI_Windows_Media_Audio.IAudioNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileoutputnode.start)
    public func start() throws {
        try _IAudioNode.StartImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileoutputnode.stop)
    public func stop() throws {
        try _IAudioNode.StopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileoutputnode.reset)
    public func reset() throws {
        try _IAudioNode.ResetImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileoutputnode.disableeffectsbydefinition)
    public func disableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws {
        try _IAudioNode.DisableEffectsByDefinitionImpl(definition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileoutputnode.enableeffectsbydefinition)
    public func enableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws {
        try _IAudioNode.EnableEffectsByDefinitionImpl(definition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileoutputnode.consumeinput)
    public var consumeInput : Bool {
        get { try! _IAudioNode.get_ConsumeInputImpl() }
        set { try! _IAudioNode.put_ConsumeInputImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileoutputnode.effectdefinitions)
    public var effectDefinitions : WindowsFoundation.AnyIVector<UWP.AnyIAudioEffectDefinition?>! {
        get { try! _IAudioNode.get_EffectDefinitionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileoutputnode.encodingproperties)
    public var encodingProperties : UWP.AudioEncodingProperties! {
        get { try! _IAudioNode.get_EncodingPropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileoutputnode.outgoinggain)
    public var outgoingGain : Double {
        get { try! _IAudioNode.get_OutgoingGainImpl() }
        set { try! _IAudioNode.put_OutgoingGainImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileoutputnode.finalizeasync)
    public func finalizeAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.TranscodeFailureReason>! {
        try _default.FinalizeAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileoutputnode.file)
    public var file : UWP.AnyIStorageFile! {
        get { try! _default.get_FileImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiofileoutputnode.fileencodingprofile)
    public var fileEncodingProfile : UWP.MediaEncodingProfile! {
        get { try! _default.get_FileEncodingProfileImpl() }
    }

    deinit {
        _IClosable = nil
        _IAudioNode = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframecompletedeventargs)
public final class AudioFrameCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioFrameCompletedEventArgs
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs>?) -> AudioFrameCompletedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframecompletedeventargs.frame)
    public var frame : UWP.AudioFrame! {
        get { try! _default.get_FrameImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode)
public final class AudioFrameInputNode : WinRTClass, WindowsFoundation.IClosable, IAudioNode, IAudioInputNode, IAudioInputNode2 {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioFrameInputNode
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode>?) -> AudioFrameInputNode? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IAudioNode: __ABI_Windows_Media_Audio.IAudioNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.start)
    public func start() throws {
        try _IAudioNode.StartImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.stop)
    public func stop() throws {
        try _IAudioNode.StopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.reset)
    public func reset() throws {
        try _IAudioNode.ResetImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.disableeffectsbydefinition)
    public func disableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws {
        try _IAudioNode.DisableEffectsByDefinitionImpl(definition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.enableeffectsbydefinition)
    public func enableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws {
        try _IAudioNode.EnableEffectsByDefinitionImpl(definition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.consumeinput)
    public var consumeInput : Bool {
        get { try! _IAudioNode.get_ConsumeInputImpl() }
        set { try! _IAudioNode.put_ConsumeInputImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.effectdefinitions)
    public var effectDefinitions : WindowsFoundation.AnyIVector<UWP.AnyIAudioEffectDefinition?>! {
        get { try! _IAudioNode.get_EffectDefinitionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.encodingproperties)
    public var encodingProperties : UWP.AudioEncodingProperties! {
        get { try! _IAudioNode.get_EncodingPropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.outgoinggain)
    public var outgoingGain : Double {
        get { try! _IAudioNode.get_OutgoingGainImpl() }
        set { try! _IAudioNode.put_OutgoingGainImpl(newValue) }
    }

    private lazy var _IAudioInputNode: __ABI_Windows_Media_Audio.IAudioInputNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.addoutgoingconnection)
    public func addOutgoingConnection(_ destination: AnyIAudioNode!) throws {
        try _IAudioInputNode.AddOutgoingConnectionImpl(destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.addoutgoingconnection)
    public func addOutgoingConnection(_ destination: AnyIAudioNode!, _ gain: Double) throws {
        try _IAudioInputNode.AddOutgoingConnectionWithGainImpl(destination, gain)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.removeoutgoingconnection)
    public func removeOutgoingConnection(_ destination: AnyIAudioNode!) throws {
        try _IAudioInputNode.RemoveOutgoingConnectionImpl(destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.outgoingconnections)
    public var outgoingConnections : WindowsFoundation.AnyIVectorView<AudioGraphConnection?>! {
        get { try! _IAudioInputNode.get_OutgoingConnectionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.addframe)
    public func addFrame(_ frame: UWP.AudioFrame!) throws {
        try _default.AddFrameImpl(frame)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.discardqueuedframes)
    public func discardQueuedFrames() throws {
        try _default.DiscardQueuedFramesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.playbackspeedfactor)
    public var playbackSpeedFactor : Double {
        get { try! _default.get_PlaybackSpeedFactorImpl() }
        set { try! _default.put_PlaybackSpeedFactorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.queuedsamplecount)
    public var queuedSampleCount : UInt64 {
        get { try! _default.get_QueuedSampleCountImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.audioframecompleted)
    public lazy var audioFrameCompleted : Event<TypedEventHandler<AudioFrameInputNode?, AudioFrameCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AudioFrameCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AudioFrameCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.quantumstarted)
    public lazy var quantumStarted : Event<TypedEventHandler<AudioFrameInputNode?, FrameInputNodeQuantumStartedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_QuantumStartedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_QuantumStartedImpl($0)
       }
      )
    }()

    private lazy var _IAudioInputNode2: __ABI_Windows_Media_Audio.IAudioInputNode2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeinputnode.emitter)
    public var emitter : AudioNodeEmitter! {
        get { try! _IAudioInputNode2.get_EmitterImpl() }
    }

    deinit {
        _IClosable = nil
        _IAudioNode = nil
        _IAudioInputNode = nil
        _default = nil
        _IAudioInputNode2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeoutputnode)
public final class AudioFrameOutputNode : WinRTClass, WindowsFoundation.IClosable, IAudioNode {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioFrameOutputNode
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode>?) -> AudioFrameOutputNode? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeoutputnode.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IAudioNode: __ABI_Windows_Media_Audio.IAudioNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeoutputnode.start)
    public func start() throws {
        try _IAudioNode.StartImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeoutputnode.stop)
    public func stop() throws {
        try _IAudioNode.StopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeoutputnode.reset)
    public func reset() throws {
        try _IAudioNode.ResetImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeoutputnode.disableeffectsbydefinition)
    public func disableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws {
        try _IAudioNode.DisableEffectsByDefinitionImpl(definition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeoutputnode.enableeffectsbydefinition)
    public func enableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws {
        try _IAudioNode.EnableEffectsByDefinitionImpl(definition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeoutputnode.consumeinput)
    public var consumeInput : Bool {
        get { try! _IAudioNode.get_ConsumeInputImpl() }
        set { try! _IAudioNode.put_ConsumeInputImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeoutputnode.effectdefinitions)
    public var effectDefinitions : WindowsFoundation.AnyIVector<UWP.AnyIAudioEffectDefinition?>! {
        get { try! _IAudioNode.get_EffectDefinitionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeoutputnode.encodingproperties)
    public var encodingProperties : UWP.AudioEncodingProperties! {
        get { try! _IAudioNode.get_EncodingPropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeoutputnode.outgoinggain)
    public var outgoingGain : Double {
        get { try! _IAudioNode.get_OutgoingGainImpl() }
        set { try! _IAudioNode.put_OutgoingGainImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audioframeoutputnode.getframe)
    public func getFrame() throws -> UWP.AudioFrame! {
        try _default.GetFrameImpl()
    }

    deinit {
        _IClosable = nil
        _IAudioNode = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph)
public final class AudioGraph : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioGraph
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioGraph>?) -> AudioGraph? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IAudioGraphStatics: __ABI_Windows_Media_Audio.IAudioGraphStatics = try! RoGetActivationFactory(HString("Windows.Media.Audio.AudioGraph"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createasync)
    public static func createAsync(_ settings: AudioGraphSettings!) -> WindowsFoundation.AnyIAsyncOperation<CreateAudioGraphResult?>! {
        return try! _IAudioGraphStatics.CreateAsyncImpl(settings)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createframeinputnode)
    public func createFrameInputNode() throws -> AudioFrameInputNode! {
        try _default.CreateFrameInputNodeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createframeinputnode)
    public func createFrameInputNode(_ encodingProperties: UWP.AudioEncodingProperties!) throws -> AudioFrameInputNode! {
        try _default.CreateFrameInputNodeWithFormatImpl(encodingProperties)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createdeviceinputnodeasync)
    public func createDeviceInputNodeAsync(_ category: UWP.MediaCategory) throws -> WindowsFoundation.AnyIAsyncOperation<CreateAudioDeviceInputNodeResult?>! {
        try _default.CreateDeviceInputNodeAsyncImpl(category)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createdeviceinputnodeasync)
    public func createDeviceInputNodeAsync(_ category: UWP.MediaCategory, _ encodingProperties: UWP.AudioEncodingProperties!) throws -> WindowsFoundation.AnyIAsyncOperation<CreateAudioDeviceInputNodeResult?>! {
        try _default.CreateDeviceInputNodeWithFormatAsyncImpl(category, encodingProperties)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createdeviceinputnodeasync)
    public func createDeviceInputNodeAsync(_ category: UWP.MediaCategory, _ encodingProperties: UWP.AudioEncodingProperties!, _ device: UWP.DeviceInformation!) throws -> WindowsFoundation.AnyIAsyncOperation<CreateAudioDeviceInputNodeResult?>! {
        try _default.CreateDeviceInputNodeWithFormatOnDeviceAsyncImpl(category, encodingProperties, device)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createframeoutputnode)
    public func createFrameOutputNode() throws -> AudioFrameOutputNode! {
        try _default.CreateFrameOutputNodeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createframeoutputnode)
    public func createFrameOutputNode(_ encodingProperties: UWP.AudioEncodingProperties!) throws -> AudioFrameOutputNode! {
        try _default.CreateFrameOutputNodeWithFormatImpl(encodingProperties)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createdeviceoutputnodeasync)
    public func createDeviceOutputNodeAsync() throws -> WindowsFoundation.AnyIAsyncOperation<CreateAudioDeviceOutputNodeResult?>! {
        try _default.CreateDeviceOutputNodeAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createfileinputnodeasync)
    public func createFileInputNodeAsync(_ file: UWP.AnyIStorageFile!) throws -> WindowsFoundation.AnyIAsyncOperation<CreateAudioFileInputNodeResult?>! {
        try _default.CreateFileInputNodeAsyncImpl(file)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createfileoutputnodeasync)
    public func createFileOutputNodeAsync(_ file: UWP.AnyIStorageFile!) throws -> WindowsFoundation.AnyIAsyncOperation<CreateAudioFileOutputNodeResult?>! {
        try _default.CreateFileOutputNodeAsyncImpl(file)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createfileoutputnodeasync)
    public func createFileOutputNodeAsync(_ file: UWP.AnyIStorageFile!, _ fileEncodingProfile: UWP.MediaEncodingProfile!) throws -> WindowsFoundation.AnyIAsyncOperation<CreateAudioFileOutputNodeResult?>! {
        try _default.CreateFileOutputNodeWithFileProfileAsyncImpl(file, fileEncodingProfile)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createsubmixnode)
    public func createSubmixNode() throws -> AudioSubmixNode! {
        try _default.CreateSubmixNodeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createsubmixnode)
    public func createSubmixNode(_ encodingProperties: UWP.AudioEncodingProperties!) throws -> AudioSubmixNode! {
        try _default.CreateSubmixNodeWithFormatImpl(encodingProperties)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.start)
    public func start() throws {
        try _default.StartImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.stop)
    public func stop() throws {
        try _default.StopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.resetallnodes)
    public func resetAllNodes() throws {
        try _default.ResetAllNodesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.completedquantumcount)
    public var completedQuantumCount : UInt64 {
        get { try! _default.get_CompletedQuantumCountImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.encodingproperties)
    public var encodingProperties : UWP.AudioEncodingProperties! {
        get { try! _default.get_EncodingPropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.latencyinsamples)
    public var latencyInSamples : Int32 {
        get { try! _default.get_LatencyInSamplesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.primaryrenderdevice)
    public var primaryRenderDevice : UWP.DeviceInformation! {
        get { try! _default.get_PrimaryRenderDeviceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.renderdeviceaudioprocessing)
    public var renderDeviceAudioProcessing : UWP.AudioProcessing {
        get { try! _default.get_RenderDeviceAudioProcessingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.samplesperquantum)
    public var samplesPerQuantum : Int32 {
        get { try! _default.get_SamplesPerQuantumImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.quantumprocessed)
    public lazy var quantumProcessed : Event<TypedEventHandler<AudioGraph?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_QuantumProcessedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_QuantumProcessedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.quantumstarted)
    public lazy var quantumStarted : Event<TypedEventHandler<AudioGraph?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_QuantumStartedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_QuantumStartedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.unrecoverableerroroccurred)
    public lazy var unrecoverableErrorOccurred : Event<TypedEventHandler<AudioGraph?, AudioGraphUnrecoverableErrorOccurredEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_UnrecoverableErrorOccurredImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_UnrecoverableErrorOccurredImpl($0)
       }
      )
    }()

    private lazy var _IAudioGraph2: __ABI_Windows_Media_Audio.IAudioGraph2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createframeinputnode)
    public func createFrameInputNode(_ encodingProperties: UWP.AudioEncodingProperties!, _ emitter: AudioNodeEmitter!) throws -> AudioFrameInputNode! {
        try _IAudioGraph2.CreateFrameInputNodeWithFormatAndEmitterImpl(encodingProperties, emitter)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createdeviceinputnodeasync)
    public func createDeviceInputNodeAsync(_ category: UWP.MediaCategory, _ encodingProperties: UWP.AudioEncodingProperties!, _ device: UWP.DeviceInformation!, _ emitter: AudioNodeEmitter!) throws -> WindowsFoundation.AnyIAsyncOperation<CreateAudioDeviceInputNodeResult?>! {
        try _IAudioGraph2.CreateDeviceInputNodeWithFormatAndEmitterOnDeviceAsyncImpl(category, encodingProperties, device, emitter)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createfileinputnodeasync)
    public func createFileInputNodeAsync(_ file: UWP.AnyIStorageFile!, _ emitter: AudioNodeEmitter!) throws -> WindowsFoundation.AnyIAsyncOperation<CreateAudioFileInputNodeResult?>! {
        try _IAudioGraph2.CreateFileInputNodeWithEmitterAsyncImpl(file, emitter)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createsubmixnode)
    public func createSubmixNode(_ encodingProperties: UWP.AudioEncodingProperties!, _ emitter: AudioNodeEmitter!) throws -> AudioSubmixNode! {
        try _IAudioGraph2.CreateSubmixNodeWithFormatAndEmitterImpl(encodingProperties, emitter)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createbatchupdater)
    public func createBatchUpdater() throws -> AudioGraphBatchUpdater! {
        try _IAudioGraph2.CreateBatchUpdaterImpl()
    }

    private lazy var _IAudioGraph3: __ABI_Windows_Media_Audio.IAudioGraph3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createmediasourceaudioinputnodeasync)
    public func createMediaSourceAudioInputNodeAsync(_ mediaSource: UWP.MediaSource!) throws -> WindowsFoundation.AnyIAsyncOperation<CreateMediaSourceAudioInputNodeResult?>! {
        try _IAudioGraph3.CreateMediaSourceAudioInputNodeAsyncImpl(mediaSource)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiograph.createmediasourceaudioinputnodeasync)
    public func createMediaSourceAudioInputNodeAsync(_ mediaSource: UWP.MediaSource!, _ emitter: AudioNodeEmitter!) throws -> WindowsFoundation.AnyIAsyncOperation<CreateMediaSourceAudioInputNodeResult?>! {
        try _IAudioGraph3.CreateMediaSourceAudioInputNodeWithEmitterAsyncImpl(mediaSource, emitter)
    }

    deinit {
        _IClosable = nil
        _default = nil
        _IAudioGraph2 = nil
        _IAudioGraph3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiographbatchupdater)
public final class AudioGraphBatchUpdater : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Windows_Foundation.IClosable
    private typealias CABI = __x_ABI_CWindows_CFoundation_CIClosable
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CFoundation_CIClosable>?) -> AudioGraphBatchUpdater? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiographbatchupdater.close)
    public func close() throws {
        try _default.CloseImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiographconnection)
public final class AudioGraphConnection : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioGraphConnection
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection>?) -> AudioGraphConnection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiographconnection.destination)
    public var destination : AnyIAudioNode! {
        get { try! _default.get_DestinationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiographconnection.gain)
    public var gain : Double {
        get { try! _default.get_GainImpl() }
        set { try! _default.put_GainImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiographsettings)
public final class AudioGraphSettings : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioGraphSettings
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings>?) -> AudioGraphSettings? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IAudioGraphSettingsFactory: __ABI_Windows_Media_Audio.IAudioGraphSettingsFactory = try! RoGetActivationFactory(HString("Windows.Media.Audio.AudioGraphSettings"))
    public init(_ audioRenderCategory: UWP.AudioRenderCategory) {
        super.init(try! Self._IAudioGraphSettingsFactory.CreateImpl(audioRenderCategory))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiographsettings.audiorendercategory)
    public var audioRenderCategory : UWP.AudioRenderCategory {
        get { try! _default.get_AudioRenderCategoryImpl() }
        set { try! _default.put_AudioRenderCategoryImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiographsettings.desiredrenderdeviceaudioprocessing)
    public var desiredRenderDeviceAudioProcessing : UWP.AudioProcessing {
        get { try! _default.get_DesiredRenderDeviceAudioProcessingImpl() }
        set { try! _default.put_DesiredRenderDeviceAudioProcessingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiographsettings.desiredsamplesperquantum)
    public var desiredSamplesPerQuantum : Int32 {
        get { try! _default.get_DesiredSamplesPerQuantumImpl() }
        set { try! _default.put_DesiredSamplesPerQuantumImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiographsettings.encodingproperties)
    public var encodingProperties : UWP.AudioEncodingProperties! {
        get { try! _default.get_EncodingPropertiesImpl() }
        set { try! _default.put_EncodingPropertiesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiographsettings.primaryrenderdevice)
    public var primaryRenderDevice : UWP.DeviceInformation! {
        get { try! _default.get_PrimaryRenderDeviceImpl() }
        set { try! _default.put_PrimaryRenderDeviceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiographsettings.quantumsizeselectionmode)
    public var quantumSizeSelectionMode : QuantumSizeSelectionMode {
        get { try! _default.get_QuantumSizeSelectionModeImpl() }
        set { try! _default.put_QuantumSizeSelectionModeImpl(newValue) }
    }

    private lazy var _IAudioGraphSettings2: __ABI_Windows_Media_Audio.IAudioGraphSettings2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiographsettings.maxplaybackspeedfactor)
    public var maxPlaybackSpeedFactor : Double {
        get { try! _IAudioGraphSettings2.get_MaxPlaybackSpeedFactorImpl() }
        set { try! _IAudioGraphSettings2.put_MaxPlaybackSpeedFactorImpl(newValue) }
    }

    deinit {
        _default = nil
        _IAudioGraphSettings2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiographunrecoverableerroroccurredeventargs)
public final class AudioGraphUnrecoverableErrorOccurredEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioGraphUnrecoverableErrorOccurredEventArgs
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs>?) -> AudioGraphUnrecoverableErrorOccurredEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiographunrecoverableerroroccurredeventargs.error)
    public var error : AudioGraphUnrecoverableError {
        get { try! _default.get_ErrorImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitter)
public final class AudioNodeEmitter : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioNodeEmitter
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter>?) -> AudioNodeEmitter? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.Media.Audio.AudioNodeEmitter")))
    }

    private static let _IAudioNodeEmitterFactory: __ABI_Windows_Media_Audio.IAudioNodeEmitterFactory = try! RoGetActivationFactory(HString("Windows.Media.Audio.AudioNodeEmitter"))
    public init(_ shape: AudioNodeEmitterShape!, _ decayModel: AudioNodeEmitterDecayModel!, _ settings: AudioNodeEmitterSettings) {
        super.init(try! Self._IAudioNodeEmitterFactory.CreateAudioNodeEmitterImpl(shape, decayModel, settings))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitter.decaymodel)
    public var decayModel : AudioNodeEmitterDecayModel! {
        get { try! _default.get_DecayModelImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitter.direction)
    public var direction : WindowsFoundation.Vector3 {
        get { try! _default.get_DirectionImpl() }
        set { try! _default.put_DirectionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitter.distancescale)
    public var distanceScale : Double {
        get { try! _default.get_DistanceScaleImpl() }
        set { try! _default.put_DistanceScaleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitter.dopplerscale)
    public var dopplerScale : Double {
        get { try! _default.get_DopplerScaleImpl() }
        set { try! _default.put_DopplerScaleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitter.dopplervelocity)
    public var dopplerVelocity : WindowsFoundation.Vector3 {
        get { try! _default.get_DopplerVelocityImpl() }
        set { try! _default.put_DopplerVelocityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitter.gain)
    public var gain : Double {
        get { try! _default.get_GainImpl() }
        set { try! _default.put_GainImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitter.isdopplerdisabled)
    public var isDopplerDisabled : Bool {
        get { try! _default.get_IsDopplerDisabledImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitter.position)
    public var position : WindowsFoundation.Vector3 {
        get { try! _default.get_PositionImpl() }
        set { try! _default.put_PositionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitter.shape)
    public var shape : AudioNodeEmitterShape! {
        get { try! _default.get_ShapeImpl() }
    }

    private lazy var _IAudioNodeEmitter2: __ABI_Windows_Media_Audio.IAudioNodeEmitter2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitter.spatialaudiomodel)
    public var spatialAudioModel : SpatialAudioModel {
        get { try! _IAudioNodeEmitter2.get_SpatialAudioModelImpl() }
        set { try! _IAudioNodeEmitter2.put_SpatialAudioModelImpl(newValue) }
    }

    deinit {
        _default = nil
        _IAudioNodeEmitter2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitterconeproperties)
public final class AudioNodeEmitterConeProperties : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioNodeEmitterConeProperties
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties>?) -> AudioNodeEmitterConeProperties? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitterconeproperties.innerangle)
    public var innerAngle : Double {
        get { try! _default.get_InnerAngleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitterconeproperties.outerangle)
    public var outerAngle : Double {
        get { try! _default.get_OuterAngleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitterconeproperties.outeranglegain)
    public var outerAngleGain : Double {
        get { try! _default.get_OuterAngleGainImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitterdecaymodel)
public final class AudioNodeEmitterDecayModel : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioNodeEmitterDecayModel
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel>?) -> AudioNodeEmitterDecayModel? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IAudioNodeEmitterDecayModelStatics: __ABI_Windows_Media_Audio.IAudioNodeEmitterDecayModelStatics = try! RoGetActivationFactory(HString("Windows.Media.Audio.AudioNodeEmitterDecayModel"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitterdecaymodel.createnatural)
    public static func createNatural(_ minGain: Double, _ maxGain: Double, _ unityGainDistance: Double, _ cutoffDistance: Double) -> AudioNodeEmitterDecayModel! {
        return try! _IAudioNodeEmitterDecayModelStatics.CreateNaturalImpl(minGain, maxGain, unityGainDistance, cutoffDistance)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitterdecaymodel.createcustom)
    public static func createCustom(_ minGain: Double, _ maxGain: Double) -> AudioNodeEmitterDecayModel! {
        return try! _IAudioNodeEmitterDecayModelStatics.CreateCustomImpl(minGain, maxGain)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitterdecaymodel.kind)
    public var kind : AudioNodeEmitterDecayKind {
        get { try! _default.get_KindImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitterdecaymodel.maxgain)
    public var maxGain : Double {
        get { try! _default.get_MaxGainImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitterdecaymodel.mingain)
    public var minGain : Double {
        get { try! _default.get_MinGainImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitterdecaymodel.naturalproperties)
    public var naturalProperties : AudioNodeEmitterNaturalDecayModelProperties! {
        get { try! _default.get_NaturalPropertiesImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitternaturaldecaymodelproperties)
public final class AudioNodeEmitterNaturalDecayModelProperties : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioNodeEmitterNaturalDecayModelProperties
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties>?) -> AudioNodeEmitterNaturalDecayModelProperties? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitternaturaldecaymodelproperties.cutoffdistance)
    public var cutoffDistance : Double {
        get { try! _default.get_CutoffDistanceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemitternaturaldecaymodelproperties.unitygaindistance)
    public var unityGainDistance : Double {
        get { try! _default.get_UnityGainDistanceImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemittershape)
public final class AudioNodeEmitterShape : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioNodeEmitterShape
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape>?) -> AudioNodeEmitterShape? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IAudioNodeEmitterShapeStatics: __ABI_Windows_Media_Audio.IAudioNodeEmitterShapeStatics = try! RoGetActivationFactory(HString("Windows.Media.Audio.AudioNodeEmitterShape"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemittershape.createcone)
    public static func createCone(_ innerAngle: Double, _ outerAngle: Double, _ outerAngleGain: Double) -> AudioNodeEmitterShape! {
        return try! _IAudioNodeEmitterShapeStatics.CreateConeImpl(innerAngle, outerAngle, outerAngleGain)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemittershape.createomnidirectional)
    public static func createOmnidirectional() -> AudioNodeEmitterShape! {
        return try! _IAudioNodeEmitterShapeStatics.CreateOmnidirectionalImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemittershape.coneproperties)
    public var coneProperties : AudioNodeEmitterConeProperties! {
        get { try! _default.get_ConePropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodeemittershape.kind)
    public var kind : AudioNodeEmitterShapeKind {
        get { try! _default.get_KindImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodelistener)
public final class AudioNodeListener : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioNodeListener
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener>?) -> AudioNodeListener? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.Media.Audio.AudioNodeListener")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodelistener.dopplervelocity)
    public var dopplerVelocity : WindowsFoundation.Vector3 {
        get { try! _default.get_DopplerVelocityImpl() }
        set { try! _default.put_DopplerVelocityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodelistener.orientation)
    public var orientation : WindowsFoundation.Quaternion {
        get { try! _default.get_OrientationImpl() }
        set { try! _default.put_OrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodelistener.position)
    public var position : WindowsFoundation.Vector3 {
        get { try! _default.get_PositionImpl() }
        set { try! _default.put_PositionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audionodelistener.speedofsound)
    public var speedOfSound : Double {
        get { try! _default.get_SpeedOfSoundImpl() }
        set { try! _default.put_SpeedOfSoundImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor)
public final class AudioStateMonitor : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioStateMonitor
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor>?) -> AudioStateMonitor? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IAudioStateMonitorStatics: __ABI_Windows_Media_Audio.IAudioStateMonitorStatics = try! RoGetActivationFactory(HString("Windows.Media.Audio.AudioStateMonitor"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.createforrendermonitoring)
    public static func createForRenderMonitoring() -> AudioStateMonitor! {
        return try! _IAudioStateMonitorStatics.CreateForRenderMonitoringImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.createforrendermonitoring)
    public static func createForRenderMonitoring(_ category: UWP.AudioRenderCategory) -> AudioStateMonitor! {
        return try! _IAudioStateMonitorStatics.CreateForRenderMonitoringWithCategoryImpl(category)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.createforrendermonitoring)
    public static func createForRenderMonitoring(_ category: UWP.AudioRenderCategory, _ role: UWP.AudioDeviceRole) -> AudioStateMonitor! {
        return try! _IAudioStateMonitorStatics.CreateForRenderMonitoringWithCategoryAndDeviceRoleImpl(category, role)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.createforrendermonitoringwithcategoryanddeviceid)
    public static func createForRenderMonitoringWithCategoryAndDeviceId(_ category: UWP.AudioRenderCategory, _ deviceId: String) -> AudioStateMonitor! {
        return try! _IAudioStateMonitorStatics.CreateForRenderMonitoringWithCategoryAndDeviceIdImpl(category, deviceId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.createforcapturemonitoring)
    public static func createForCaptureMonitoring() -> AudioStateMonitor! {
        return try! _IAudioStateMonitorStatics.CreateForCaptureMonitoringImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.createforcapturemonitoring)
    public static func createForCaptureMonitoring(_ category: UWP.MediaCategory) -> AudioStateMonitor! {
        return try! _IAudioStateMonitorStatics.CreateForCaptureMonitoringWithCategoryImpl(category)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.createforcapturemonitoring)
    public static func createForCaptureMonitoring(_ category: UWP.MediaCategory, _ role: UWP.AudioDeviceRole) -> AudioStateMonitor! {
        return try! _IAudioStateMonitorStatics.CreateForCaptureMonitoringWithCategoryAndDeviceRoleImpl(category, role)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.createforcapturemonitoringwithcategoryanddeviceid)
    public static func createForCaptureMonitoringWithCategoryAndDeviceId(_ category: UWP.MediaCategory, _ deviceId: String) -> AudioStateMonitor! {
        return try! _IAudioStateMonitorStatics.CreateForCaptureMonitoringWithCategoryAndDeviceIdImpl(category, deviceId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.soundlevel)
    public var soundLevel : UWP.SoundLevel {
        get { try! _default.get_SoundLevelImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.soundlevelchanged)
    public lazy var soundLevelChanged : Event<TypedEventHandler<AudioStateMonitor?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SoundLevelChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SoundLevelChangedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiosubmixnode)
public final class AudioSubmixNode : WinRTClass, WindowsFoundation.IClosable, IAudioNode, IAudioInputNode, IAudioInputNode2 {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IAudioInputNode
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode>?) -> AudioSubmixNode? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiosubmixnode.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IAudioNode: __ABI_Windows_Media_Audio.IAudioNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiosubmixnode.start)
    public func start() throws {
        try _IAudioNode.StartImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiosubmixnode.stop)
    public func stop() throws {
        try _IAudioNode.StopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiosubmixnode.reset)
    public func reset() throws {
        try _IAudioNode.ResetImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiosubmixnode.disableeffectsbydefinition)
    public func disableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws {
        try _IAudioNode.DisableEffectsByDefinitionImpl(definition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiosubmixnode.enableeffectsbydefinition)
    public func enableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws {
        try _IAudioNode.EnableEffectsByDefinitionImpl(definition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiosubmixnode.consumeinput)
    public var consumeInput : Bool {
        get { try! _IAudioNode.get_ConsumeInputImpl() }
        set { try! _IAudioNode.put_ConsumeInputImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiosubmixnode.effectdefinitions)
    public var effectDefinitions : WindowsFoundation.AnyIVector<UWP.AnyIAudioEffectDefinition?>! {
        get { try! _IAudioNode.get_EffectDefinitionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiosubmixnode.encodingproperties)
    public var encodingProperties : UWP.AudioEncodingProperties! {
        get { try! _IAudioNode.get_EncodingPropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiosubmixnode.outgoinggain)
    public var outgoingGain : Double {
        get { try! _IAudioNode.get_OutgoingGainImpl() }
        set { try! _IAudioNode.put_OutgoingGainImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiosubmixnode.addoutgoingconnection)
    public func addOutgoingConnection(_ destination: AnyIAudioNode!) throws {
        try _default.AddOutgoingConnectionImpl(destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiosubmixnode.addoutgoingconnection)
    public func addOutgoingConnection(_ destination: AnyIAudioNode!, _ gain: Double) throws {
        try _default.AddOutgoingConnectionWithGainImpl(destination, gain)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiosubmixnode.removeoutgoingconnection)
    public func removeOutgoingConnection(_ destination: AnyIAudioNode!) throws {
        try _default.RemoveOutgoingConnectionImpl(destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiosubmixnode.outgoingconnections)
    public var outgoingConnections : WindowsFoundation.AnyIVectorView<AudioGraphConnection?>! {
        get { try! _default.get_OutgoingConnectionsImpl() }
    }

    private lazy var _IAudioInputNode2: __ABI_Windows_Media_Audio.IAudioInputNode2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiosubmixnode.emitter)
    public var emitter : AudioNodeEmitter! {
        get { try! _IAudioInputNode2.get_EmitterImpl() }
    }

    deinit {
        _IClosable = nil
        _IAudioNode = nil
        _default = nil
        _IAudioInputNode2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiodeviceinputnoderesult)
public final class CreateAudioDeviceInputNodeResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.ICreateAudioDeviceInputNodeResult
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult>?) -> CreateAudioDeviceInputNodeResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiodeviceinputnoderesult.deviceinputnode)
    public var deviceInputNode : AudioDeviceInputNode! {
        get { try! _default.get_DeviceInputNodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiodeviceinputnoderesult.status)
    public var status : AudioDeviceNodeCreationStatus {
        get { try! _default.get_StatusImpl() }
    }

    private lazy var _ICreateAudioDeviceInputNodeResult2: __ABI_Windows_Media_Audio.ICreateAudioDeviceInputNodeResult2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiodeviceinputnoderesult.extendederror)
    public var extendedError : HRESULT {
        get { try! _ICreateAudioDeviceInputNodeResult2.get_ExtendedErrorImpl() }
    }

    deinit {
        _default = nil
        _ICreateAudioDeviceInputNodeResult2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiodeviceoutputnoderesult)
public final class CreateAudioDeviceOutputNodeResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.ICreateAudioDeviceOutputNodeResult
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult>?) -> CreateAudioDeviceOutputNodeResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiodeviceoutputnoderesult.deviceoutputnode)
    public var deviceOutputNode : AudioDeviceOutputNode! {
        get { try! _default.get_DeviceOutputNodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiodeviceoutputnoderesult.status)
    public var status : AudioDeviceNodeCreationStatus {
        get { try! _default.get_StatusImpl() }
    }

    private lazy var _ICreateAudioDeviceOutputNodeResult2: __ABI_Windows_Media_Audio.ICreateAudioDeviceOutputNodeResult2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiodeviceoutputnoderesult.extendederror)
    public var extendedError : HRESULT {
        get { try! _ICreateAudioDeviceOutputNodeResult2.get_ExtendedErrorImpl() }
    }

    deinit {
        _default = nil
        _ICreateAudioDeviceOutputNodeResult2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiofileinputnoderesult)
public final class CreateAudioFileInputNodeResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.ICreateAudioFileInputNodeResult
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult>?) -> CreateAudioFileInputNodeResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiofileinputnoderesult.fileinputnode)
    public var fileInputNode : AudioFileInputNode! {
        get { try! _default.get_FileInputNodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiofileinputnoderesult.status)
    public var status : AudioFileNodeCreationStatus {
        get { try! _default.get_StatusImpl() }
    }

    private lazy var _ICreateAudioFileInputNodeResult2: __ABI_Windows_Media_Audio.ICreateAudioFileInputNodeResult2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiofileinputnoderesult.extendederror)
    public var extendedError : HRESULT {
        get { try! _ICreateAudioFileInputNodeResult2.get_ExtendedErrorImpl() }
    }

    deinit {
        _default = nil
        _ICreateAudioFileInputNodeResult2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiofileoutputnoderesult)
public final class CreateAudioFileOutputNodeResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.ICreateAudioFileOutputNodeResult
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult>?) -> CreateAudioFileOutputNodeResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiofileoutputnoderesult.fileoutputnode)
    public var fileOutputNode : AudioFileOutputNode! {
        get { try! _default.get_FileOutputNodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiofileoutputnoderesult.status)
    public var status : AudioFileNodeCreationStatus {
        get { try! _default.get_StatusImpl() }
    }

    private lazy var _ICreateAudioFileOutputNodeResult2: __ABI_Windows_Media_Audio.ICreateAudioFileOutputNodeResult2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiofileoutputnoderesult.extendederror)
    public var extendedError : HRESULT {
        get { try! _ICreateAudioFileOutputNodeResult2.get_ExtendedErrorImpl() }
    }

    deinit {
        _default = nil
        _ICreateAudioFileOutputNodeResult2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiographresult)
public final class CreateAudioGraphResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.ICreateAudioGraphResult
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult>?) -> CreateAudioGraphResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiographresult.graph)
    public var graph : AudioGraph! {
        get { try! _default.get_GraphImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiographresult.status)
    public var status : AudioGraphCreationStatus {
        get { try! _default.get_StatusImpl() }
    }

    private lazy var _ICreateAudioGraphResult2: __ABI_Windows_Media_Audio.ICreateAudioGraphResult2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createaudiographresult.extendederror)
    public var extendedError : HRESULT {
        get { try! _ICreateAudioGraphResult2.get_ExtendedErrorImpl() }
    }

    deinit {
        _default = nil
        _ICreateAudioGraphResult2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createmediasourceaudioinputnoderesult)
public final class CreateMediaSourceAudioInputNodeResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.ICreateMediaSourceAudioInputNodeResult
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult>?) -> CreateMediaSourceAudioInputNodeResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createmediasourceaudioinputnoderesult.node)
    public var node : MediaSourceAudioInputNode! {
        get { try! _default.get_NodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createmediasourceaudioinputnoderesult.status)
    public var status : MediaSourceAudioInputNodeCreationStatus {
        get { try! _default.get_StatusImpl() }
    }

    private lazy var _ICreateMediaSourceAudioInputNodeResult2: __ABI_Windows_Media_Audio.ICreateMediaSourceAudioInputNodeResult2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.createmediasourceaudioinputnoderesult.extendederror)
    public var extendedError : HRESULT {
        get { try! _ICreateMediaSourceAudioInputNodeResult2.get_ExtendedErrorImpl() }
    }

    deinit {
        _default = nil
        _ICreateMediaSourceAudioInputNodeResult2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.echoeffectdefinition)
public final class EchoEffectDefinition : WinRTClass, UWP.IAudioEffectDefinition {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IEchoEffectDefinition
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition>?) -> EchoEffectDefinition? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IEchoEffectDefinitionFactory: __ABI_Windows_Media_Audio.IEchoEffectDefinitionFactory = try! RoGetActivationFactory(HString("Windows.Media.Audio.EchoEffectDefinition"))
    public init(_ audioGraph: AudioGraph!) {
        super.init(try! Self._IEchoEffectDefinitionFactory.CreateImpl(audioGraph))
    }

    private lazy var _IAudioEffectDefinition: __ABI_Windows_Media_Effects.IAudioEffectDefinition! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.echoeffectdefinition.activatableclassid)
    public var activatableClassId : String {
        get { try! _IAudioEffectDefinition.get_ActivatableClassIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.echoeffectdefinition.properties)
    public var properties : WindowsFoundation.AnyIPropertySet! {
        get { try! _IAudioEffectDefinition.get_PropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.echoeffectdefinition.delay)
    public var delay : Double {
        get { try! _default.get_DelayImpl() }
        set { try! _default.put_DelayImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.echoeffectdefinition.feedback)
    public var feedback : Double {
        get { try! _default.get_FeedbackImpl() }
        set { try! _default.put_FeedbackImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.echoeffectdefinition.wetdrymix)
    public var wetDryMix : Double {
        get { try! _default.get_WetDryMixImpl() }
        set { try! _default.put_WetDryMixImpl(newValue) }
    }

    deinit {
        _IAudioEffectDefinition = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.equalizerband)
public final class EqualizerBand : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IEqualizerBand
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand>?) -> EqualizerBand? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.equalizerband.bandwidth)
    public var bandwidth : Double {
        get { try! _default.get_BandwidthImpl() }
        set { try! _default.put_BandwidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.equalizerband.frequencycenter)
    public var frequencyCenter : Double {
        get { try! _default.get_FrequencyCenterImpl() }
        set { try! _default.put_FrequencyCenterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.equalizerband.gain)
    public var gain : Double {
        get { try! _default.get_GainImpl() }
        set { try! _default.put_GainImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.equalizereffectdefinition)
public final class EqualizerEffectDefinition : WinRTClass, UWP.IAudioEffectDefinition {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IEqualizerEffectDefinition
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition>?) -> EqualizerEffectDefinition? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IEqualizerEffectDefinitionFactory: __ABI_Windows_Media_Audio.IEqualizerEffectDefinitionFactory = try! RoGetActivationFactory(HString("Windows.Media.Audio.EqualizerEffectDefinition"))
    public init(_ audioGraph: AudioGraph!) {
        super.init(try! Self._IEqualizerEffectDefinitionFactory.CreateImpl(audioGraph))
    }

    private lazy var _IAudioEffectDefinition: __ABI_Windows_Media_Effects.IAudioEffectDefinition! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.equalizereffectdefinition.activatableclassid)
    public var activatableClassId : String {
        get { try! _IAudioEffectDefinition.get_ActivatableClassIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.equalizereffectdefinition.properties)
    public var properties : WindowsFoundation.AnyIPropertySet! {
        get { try! _IAudioEffectDefinition.get_PropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.equalizereffectdefinition.bands)
    public var bands : WindowsFoundation.AnyIVectorView<EqualizerBand?>! {
        get { try! _default.get_BandsImpl() }
    }

    deinit {
        _IAudioEffectDefinition = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.frameinputnodequantumstartedeventargs)
public final class FrameInputNodeQuantumStartedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IFrameInputNodeQuantumStartedEventArgs
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs>?) -> FrameInputNodeQuantumStartedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.frameinputnodequantumstartedeventargs.requiredsamples)
    public var requiredSamples : Int32 {
        get { try! _default.get_RequiredSamplesImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.limitereffectdefinition)
public final class LimiterEffectDefinition : WinRTClass, UWP.IAudioEffectDefinition {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.ILimiterEffectDefinition
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition>?) -> LimiterEffectDefinition? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ILimiterEffectDefinitionFactory: __ABI_Windows_Media_Audio.ILimiterEffectDefinitionFactory = try! RoGetActivationFactory(HString("Windows.Media.Audio.LimiterEffectDefinition"))
    public init(_ audioGraph: AudioGraph!) {
        super.init(try! Self._ILimiterEffectDefinitionFactory.CreateImpl(audioGraph))
    }

    private lazy var _IAudioEffectDefinition: __ABI_Windows_Media_Effects.IAudioEffectDefinition! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.limitereffectdefinition.activatableclassid)
    public var activatableClassId : String {
        get { try! _IAudioEffectDefinition.get_ActivatableClassIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.limitereffectdefinition.properties)
    public var properties : WindowsFoundation.AnyIPropertySet! {
        get { try! _IAudioEffectDefinition.get_PropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.limitereffectdefinition.loudness)
    public var loudness : UInt32 {
        get { try! _default.get_LoudnessImpl() }
        set { try! _default.put_LoudnessImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.limitereffectdefinition.release)
    public var release : UInt32 {
        get { try! _default.get_ReleaseImpl() }
        set { try! _default.put_ReleaseImpl(newValue) }
    }

    deinit {
        _IAudioEffectDefinition = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode)
public final class MediaSourceAudioInputNode : WinRTClass, WindowsFoundation.IClosable, IAudioNode, IAudioInputNode, IAudioInputNode2 {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IMediaSourceAudioInputNode
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode>?) -> MediaSourceAudioInputNode? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.close)
    public func close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IAudioNode: __ABI_Windows_Media_Audio.IAudioNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.start)
    public func start() throws {
        try _IAudioNode.StartImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.stop)
    public func stop() throws {
        try _IAudioNode.StopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.reset)
    public func reset() throws {
        try _IAudioNode.ResetImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.disableeffectsbydefinition)
    public func disableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws {
        try _IAudioNode.DisableEffectsByDefinitionImpl(definition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.enableeffectsbydefinition)
    public func enableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws {
        try _IAudioNode.EnableEffectsByDefinitionImpl(definition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.consumeinput)
    public var consumeInput : Bool {
        get { try! _IAudioNode.get_ConsumeInputImpl() }
        set { try! _IAudioNode.put_ConsumeInputImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.effectdefinitions)
    public var effectDefinitions : WindowsFoundation.AnyIVector<UWP.AnyIAudioEffectDefinition?>! {
        get { try! _IAudioNode.get_EffectDefinitionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.encodingproperties)
    public var encodingProperties : UWP.AudioEncodingProperties! {
        get { try! _IAudioNode.get_EncodingPropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.outgoinggain)
    public var outgoingGain : Double {
        get { try! _IAudioNode.get_OutgoingGainImpl() }
        set { try! _IAudioNode.put_OutgoingGainImpl(newValue) }
    }

    private lazy var _IAudioInputNode: __ABI_Windows_Media_Audio.IAudioInputNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.addoutgoingconnection)
    public func addOutgoingConnection(_ destination: AnyIAudioNode!) throws {
        try _IAudioInputNode.AddOutgoingConnectionImpl(destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.addoutgoingconnection)
    public func addOutgoingConnection(_ destination: AnyIAudioNode!, _ gain: Double) throws {
        try _IAudioInputNode.AddOutgoingConnectionWithGainImpl(destination, gain)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.removeoutgoingconnection)
    public func removeOutgoingConnection(_ destination: AnyIAudioNode!) throws {
        try _IAudioInputNode.RemoveOutgoingConnectionImpl(destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.outgoingconnections)
    public var outgoingConnections : WindowsFoundation.AnyIVectorView<AudioGraphConnection?>! {
        get { try! _IAudioInputNode.get_OutgoingConnectionsImpl() }
    }

    private lazy var _IAudioInputNode2: __ABI_Windows_Media_Audio.IAudioInputNode2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.emitter)
    public var emitter : AudioNodeEmitter! {
        get { try! _IAudioInputNode2.get_EmitterImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.seek)
    public func seek(_ position: WindowsFoundation.TimeSpan) throws {
        try _default.SeekImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.duration)
    public var duration : WindowsFoundation.TimeSpan {
        get { try! _default.get_DurationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.endtime)
    public var endTime : WindowsFoundation.TimeSpan? {
        get { try! _default.get_EndTimeImpl() }
        set { try! _default.put_EndTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.loopcount)
    public var loopCount : Int32? {
        get { try! _default.get_LoopCountImpl() }
        set { try! _default.put_LoopCountImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.mediasource)
    public var mediaSource : UWP.MediaSource! {
        get { try! _default.get_MediaSourceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.playbackspeedfactor)
    public var playbackSpeedFactor : Double {
        get { try! _default.get_PlaybackSpeedFactorImpl() }
        set { try! _default.put_PlaybackSpeedFactorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.position)
    public var position : WindowsFoundation.TimeSpan {
        get { try! _default.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.starttime)
    public var startTime : WindowsFoundation.TimeSpan? {
        get { try! _default.get_StartTimeImpl() }
        set { try! _default.put_StartTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.mediasourceaudioinputnode.mediasourcecompleted)
    public lazy var mediaSourceCompleted : Event<TypedEventHandler<MediaSourceAudioInputNode?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_MediaSourceCompletedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_MediaSourceCompletedImpl($0)
       }
      )
    }()

    deinit {
        _IClosable = nil
        _IAudioNode = nil
        _IAudioInputNode = nil
        _IAudioInputNode2 = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition)
public final class ReverbEffectDefinition : WinRTClass, UWP.IAudioEffectDefinition {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.IReverbEffectDefinition
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition>?) -> ReverbEffectDefinition? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IReverbEffectDefinitionFactory: __ABI_Windows_Media_Audio.IReverbEffectDefinitionFactory = try! RoGetActivationFactory(HString("Windows.Media.Audio.ReverbEffectDefinition"))
    public init(_ audioGraph: AudioGraph!) {
        super.init(try! Self._IReverbEffectDefinitionFactory.CreateImpl(audioGraph))
    }

    private lazy var _IAudioEffectDefinition: __ABI_Windows_Media_Effects.IAudioEffectDefinition! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.activatableclassid)
    public var activatableClassId : String {
        get { try! _IAudioEffectDefinition.get_ActivatableClassIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.properties)
    public var properties : WindowsFoundation.AnyIPropertySet! {
        get { try! _IAudioEffectDefinition.get_PropertiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.decaytime)
    public var decayTime : Double {
        get { try! _default.get_DecayTimeImpl() }
        set { try! _default.put_DecayTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.density)
    public var density : Double {
        get { try! _default.get_DensityImpl() }
        set { try! _default.put_DensityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.disablelatefield)
    public var disableLateField : Bool {
        get { try! _default.get_DisableLateFieldImpl() }
        set { try! _default.put_DisableLateFieldImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.earlydiffusion)
    public var earlyDiffusion : UInt8 {
        get { try! _default.get_EarlyDiffusionImpl() }
        set { try! _default.put_EarlyDiffusionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.higheqcutoff)
    public var highEQCutoff : UInt8 {
        get { try! _default.get_HighEQCutoffImpl() }
        set { try! _default.put_HighEQCutoffImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.higheqgain)
    public var highEQGain : UInt8 {
        get { try! _default.get_HighEQGainImpl() }
        set { try! _default.put_HighEQGainImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.latediffusion)
    public var lateDiffusion : UInt8 {
        get { try! _default.get_LateDiffusionImpl() }
        set { try! _default.put_LateDiffusionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.loweqcutoff)
    public var lowEQCutoff : UInt8 {
        get { try! _default.get_LowEQCutoffImpl() }
        set { try! _default.put_LowEQCutoffImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.loweqgain)
    public var lowEQGain : UInt8 {
        get { try! _default.get_LowEQGainImpl() }
        set { try! _default.put_LowEQGainImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.positionleft)
    public var positionLeft : UInt8 {
        get { try! _default.get_PositionLeftImpl() }
        set { try! _default.put_PositionLeftImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.positionmatrixleft)
    public var positionMatrixLeft : UInt8 {
        get { try! _default.get_PositionMatrixLeftImpl() }
        set { try! _default.put_PositionMatrixLeftImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.positionmatrixright)
    public var positionMatrixRight : UInt8 {
        get { try! _default.get_PositionMatrixRightImpl() }
        set { try! _default.put_PositionMatrixRightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.positionright)
    public var positionRight : UInt8 {
        get { try! _default.get_PositionRightImpl() }
        set { try! _default.put_PositionRightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.reardelay)
    public var rearDelay : UInt8 {
        get { try! _default.get_RearDelayImpl() }
        set { try! _default.put_RearDelayImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.reflectionsdelay)
    public var reflectionsDelay : UInt32 {
        get { try! _default.get_ReflectionsDelayImpl() }
        set { try! _default.put_ReflectionsDelayImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.reflectionsgain)
    public var reflectionsGain : Double {
        get { try! _default.get_ReflectionsGainImpl() }
        set { try! _default.put_ReflectionsGainImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.reverbdelay)
    public var reverbDelay : UInt8 {
        get { try! _default.get_ReverbDelayImpl() }
        set { try! _default.put_ReverbDelayImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.reverbgain)
    public var reverbGain : Double {
        get { try! _default.get_ReverbGainImpl() }
        set { try! _default.put_ReverbGainImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.roomfilterfreq)
    public var roomFilterFreq : Double {
        get { try! _default.get_RoomFilterFreqImpl() }
        set { try! _default.put_RoomFilterFreqImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.roomfilterhf)
    public var roomFilterHF : Double {
        get { try! _default.get_RoomFilterHFImpl() }
        set { try! _default.put_RoomFilterHFImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.roomfiltermain)
    public var roomFilterMain : Double {
        get { try! _default.get_RoomFilterMainImpl() }
        set { try! _default.put_RoomFilterMainImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.roomsize)
    public var roomSize : Double {
        get { try! _default.get_RoomSizeImpl() }
        set { try! _default.put_RoomSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.reverbeffectdefinition.wetdrymix)
    public var wetDryMix : Double {
        get { try! _default.get_WetDryMixImpl() }
        set { try! _default.put_WetDryMixImpl(newValue) }
    }

    deinit {
        _IAudioEffectDefinition = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.setdefaultspatialaudioformatresult)
public final class SetDefaultSpatialAudioFormatResult : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.ISetDefaultSpatialAudioFormatResult
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult>?) -> SetDefaultSpatialAudioFormatResult? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.setdefaultspatialaudioformatresult.status)
    public var status : SetDefaultSpatialAudioFormatStatus {
        get { try! _default.get_StatusImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudiodeviceconfiguration)
public final class SpatialAudioDeviceConfiguration : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.ISpatialAudioDeviceConfiguration
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration>?) -> SpatialAudioDeviceConfiguration? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _ISpatialAudioDeviceConfigurationStatics: __ABI_Windows_Media_Audio.ISpatialAudioDeviceConfigurationStatics = try! RoGetActivationFactory(HString("Windows.Media.Audio.SpatialAudioDeviceConfiguration"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudiodeviceconfiguration.getfordeviceid)
    public static func getForDeviceId(_ deviceId: String) -> SpatialAudioDeviceConfiguration! {
        return try! _ISpatialAudioDeviceConfigurationStatics.GetForDeviceIdImpl(deviceId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudiodeviceconfiguration.isspatialaudioformatsupported)
    public func isSpatialAudioFormatSupported(_ subtype: String) throws -> Bool {
        try _default.IsSpatialAudioFormatSupportedImpl(subtype)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudiodeviceconfiguration.setdefaultspatialaudioformatasync)
    public func setDefaultSpatialAudioFormatAsync(_ subtype: String) throws -> WindowsFoundation.AnyIAsyncOperation<SetDefaultSpatialAudioFormatResult?>! {
        try _default.SetDefaultSpatialAudioFormatAsyncImpl(subtype)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudiodeviceconfiguration.activespatialaudioformat)
    public var activeSpatialAudioFormat : String {
        get { try! _default.get_ActiveSpatialAudioFormatImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudiodeviceconfiguration.defaultspatialaudioformat)
    public var defaultSpatialAudioFormat : String {
        get { try! _default.get_DefaultSpatialAudioFormatImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudiodeviceconfiguration.deviceid)
    public var deviceId : String {
        get { try! _default.get_DeviceIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudiodeviceconfiguration.isspatialaudiosupported)
    public var isSpatialAudioSupported : Bool {
        get { try! _default.get_IsSpatialAudioSupportedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudiodeviceconfiguration.configurationchanged)
    public lazy var configurationChanged : Event<TypedEventHandler<SpatialAudioDeviceConfiguration?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ConfigurationChangedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ConfigurationChangedImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudioformatconfiguration)
public final class SpatialAudioFormatConfiguration : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Media_Audio.ISpatialAudioFormatConfiguration
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration>?) -> SpatialAudioFormatConfiguration? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _ISpatialAudioFormatConfigurationStatics: __ABI_Windows_Media_Audio.ISpatialAudioFormatConfigurationStatics = try! RoGetActivationFactory(HString("Windows.Media.Audio.SpatialAudioFormatConfiguration"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudioformatconfiguration.getdefault)
    public static func getDefault() -> SpatialAudioFormatConfiguration! {
        return try! _ISpatialAudioFormatConfigurationStatics.GetDefaultImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudioformatconfiguration.reportlicensechangedasync)
    public func reportLicenseChangedAsync(_ subtype: String) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.ReportLicenseChangedAsyncImpl(subtype)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudioformatconfiguration.reportconfigurationchangedasync)
    public func reportConfigurationChangedAsync(_ subtype: String) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.ReportConfigurationChangedAsyncImpl(subtype)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudioformatconfiguration.mixedrealityexclusivemodepolicy)
    public var mixedRealityExclusiveModePolicy : MixedRealitySpatialAudioFormatPolicy {
        get { try! _default.get_MixedRealityExclusiveModePolicyImpl() }
        set { try! _default.put_MixedRealityExclusiveModePolicyImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudioformatsubtype)
public final class SpatialAudioFormatSubtype {
    private static let _ISpatialAudioFormatSubtypeStatics: __ABI_Windows_Media_Audio.ISpatialAudioFormatSubtypeStatics = try! RoGetActivationFactory(HString("Windows.Media.Audio.SpatialAudioFormatSubtype"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudioformatsubtype.dtsheadphonex)
    public static var dtsHeadphoneX : String {
        get { try! _ISpatialAudioFormatSubtypeStatics.get_DTSHeadphoneXImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudioformatsubtype.dtsxultra)
    public static var dtsxUltra : String {
        get { try! _ISpatialAudioFormatSubtypeStatics.get_DTSXUltraImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudioformatsubtype.dolbyatmosforheadphones)
    public static var dolbyAtmosForHeadphones : String {
        get { try! _ISpatialAudioFormatSubtypeStatics.get_DolbyAtmosForHeadphonesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudioformatsubtype.dolbyatmosforhometheater)
    public static var dolbyAtmosForHomeTheater : String {
        get { try! _ISpatialAudioFormatSubtypeStatics.get_DolbyAtmosForHomeTheaterImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudioformatsubtype.dolbyatmosforspeakers)
    public static var dolbyAtmosForSpeakers : String {
        get { try! _ISpatialAudioFormatSubtypeStatics.get_DolbyAtmosForSpeakersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.spatialaudioformatsubtype.windowssonic)
    public static var windowsSonic : String {
        get { try! _ISpatialAudioFormatSubtypeStatics.get_WindowsSonicImpl() }
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudioinputnode)
public protocol IAudioInputNode : WindowsFoundation.IClosable, IAudioNode {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudioinputnode.addoutgoingconnection)
    func addOutgoingConnection(_ destination: UWP.AnyIAudioNode!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudioinputnode.addoutgoingconnection)
    func addOutgoingConnection(_ destination: UWP.AnyIAudioNode!, _ gain: Double) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudioinputnode.removeoutgoingconnection)
    func removeOutgoingConnection(_ destination: UWP.AnyIAudioNode!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudioinputnode.outgoingconnections)
    var outgoingConnections: WindowsFoundation.AnyIVectorView<UWP.AudioGraphConnection?>! { get }
}

extension IAudioInputNode {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Media_Audio.IAudioInputNodeWrapper.IID:
                let wrapper = __ABI_Windows_Media_Audio.IAudioInputNodeWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Media_Audio.IAudioNodeWrapper.IID:
                let wrapper = __ABI_Windows_Media_Audio.IAudioNodeWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAudioInputNode = any IAudioInputNode

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudioinputnode2)
public protocol IAudioInputNode2 : WindowsFoundation.IClosable, IAudioNode, IAudioInputNode {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudioinputnode2.emitter)
    var emitter: UWP.AudioNodeEmitter! { get }
}

extension IAudioInputNode2 {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Media_Audio.IAudioInputNode2Wrapper.IID:
                let wrapper = __ABI_Windows_Media_Audio.IAudioInputNode2Wrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Media_Audio.IAudioNodeWrapper.IID:
                let wrapper = __ABI_Windows_Media_Audio.IAudioNodeWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Media_Audio.IAudioInputNodeWrapper.IID:
                let wrapper = __ABI_Windows_Media_Audio.IAudioInputNodeWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAudioInputNode2 = any IAudioInputNode2

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudionode)
public protocol IAudioNode : WindowsFoundation.IClosable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudionode.start)
    func start() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudionode.stop)
    func stop() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudionode.reset)
    func reset() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudionode.disableeffectsbydefinition)
    func disableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudionode.enableeffectsbydefinition)
    func enableEffectsByDefinition(_ definition: UWP.AnyIAudioEffectDefinition!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudionode.consumeinput)
    var consumeInput: Bool { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudionode.effectdefinitions)
    var effectDefinitions: WindowsFoundation.AnyIVector<UWP.AnyIAudioEffectDefinition?>! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudionode.encodingproperties)
    var encodingProperties: UWP.AudioEncodingProperties! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudionode.outgoinggain)
    var outgoingGain: Double { get set }
}

extension IAudioNode {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Media_Audio.IAudioNodeWrapper.IID:
                let wrapper = __ABI_Windows_Media_Audio.IAudioNodeWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAudioNode = any IAudioNode

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudionodewithlistener)
public protocol IAudioNodeWithListener : WindowsFoundation.IClosable, IAudioNode {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.iaudionodewithlistener.listener)
    var listener: UWP.AudioNodeListener! { get set }
}

extension IAudioNodeWithListener {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Media_Audio.IAudioNodeWithListenerWrapper.IID:
                let wrapper = __ABI_Windows_Media_Audio.IAudioNodeWithListenerWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Media_Audio.IAudioNodeWrapper.IID:
                let wrapper = __ABI_Windows_Media_Audio.IAudioNodeWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAudioNodeWithListener = any IAudioNodeWithListener

extension UWP.AudioDeviceNodeCreationStatus {
    public static var success : UWP.AudioDeviceNodeCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus_Success
    }
    public static var deviceNotAvailable : UWP.AudioDeviceNodeCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus_DeviceNotAvailable
    }
    public static var formatNotSupported : UWP.AudioDeviceNodeCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus_FormatNotSupported
    }
    public static var unknownFailure : UWP.AudioDeviceNodeCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus_UnknownFailure
    }
    public static var accessDenied : UWP.AudioDeviceNodeCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus_AccessDenied
    }
}
extension UWP.AudioDeviceNodeCreationStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.AudioFileNodeCreationStatus {
    public static var success : UWP.AudioFileNodeCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus_Success
    }
    public static var fileNotFound : UWP.AudioFileNodeCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus_FileNotFound
    }
    public static var invalidFileType : UWP.AudioFileNodeCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus_InvalidFileType
    }
    public static var formatNotSupported : UWP.AudioFileNodeCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus_FormatNotSupported
    }
    public static var unknownFailure : UWP.AudioFileNodeCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus_UnknownFailure
    }
}
extension UWP.AudioFileNodeCreationStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.AudioGraphCreationStatus {
    public static var success : UWP.AudioGraphCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CAudioGraphCreationStatus_Success
    }
    public static var deviceNotAvailable : UWP.AudioGraphCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CAudioGraphCreationStatus_DeviceNotAvailable
    }
    public static var formatNotSupported : UWP.AudioGraphCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CAudioGraphCreationStatus_FormatNotSupported
    }
    public static var unknownFailure : UWP.AudioGraphCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CAudioGraphCreationStatus_UnknownFailure
    }
}
extension UWP.AudioGraphCreationStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.AudioGraphUnrecoverableError {
    public static var none : UWP.AudioGraphUnrecoverableError {
        __x_ABI_CWindows_CMedia_CAudio_CAudioGraphUnrecoverableError_None
    }
    public static var audioDeviceLost : UWP.AudioGraphUnrecoverableError {
        __x_ABI_CWindows_CMedia_CAudio_CAudioGraphUnrecoverableError_AudioDeviceLost
    }
    public static var audioSessionDisconnected : UWP.AudioGraphUnrecoverableError {
        __x_ABI_CWindows_CMedia_CAudio_CAudioGraphUnrecoverableError_AudioSessionDisconnected
    }
    public static var unknownFailure : UWP.AudioGraphUnrecoverableError {
        __x_ABI_CWindows_CMedia_CAudio_CAudioGraphUnrecoverableError_UnknownFailure
    }
}
extension UWP.AudioGraphUnrecoverableError: @retroactive Hashable, @retroactive Codable {}

extension UWP.AudioNodeEmitterDecayKind {
    public static var natural : UWP.AudioNodeEmitterDecayKind {
        __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterDecayKind_Natural
    }
    public static var custom : UWP.AudioNodeEmitterDecayKind {
        __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterDecayKind_Custom
    }
}
extension UWP.AudioNodeEmitterDecayKind: @retroactive Hashable, @retroactive Codable {}

extension UWP.AudioNodeEmitterSettings {
    public static var none : UWP.AudioNodeEmitterSettings {
        __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterSettings_None
    }
    public static var disableDoppler : UWP.AudioNodeEmitterSettings {
        __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterSettings_DisableDoppler
    }
}
extension UWP.AudioNodeEmitterSettings: @retroactive Hashable, @retroactive Codable {}

extension UWP.AudioNodeEmitterShapeKind {
    public static var omnidirectional : UWP.AudioNodeEmitterShapeKind {
        __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterShapeKind_Omnidirectional
    }
    public static var cone : UWP.AudioNodeEmitterShapeKind {
        __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterShapeKind_Cone
    }
}
extension UWP.AudioNodeEmitterShapeKind: @retroactive Hashable, @retroactive Codable {}

extension UWP.MediaSourceAudioInputNodeCreationStatus {
    public static var success : UWP.MediaSourceAudioInputNodeCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CMediaSourceAudioInputNodeCreationStatus_Success
    }
    public static var formatNotSupported : UWP.MediaSourceAudioInputNodeCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CMediaSourceAudioInputNodeCreationStatus_FormatNotSupported
    }
    public static var networkError : UWP.MediaSourceAudioInputNodeCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CMediaSourceAudioInputNodeCreationStatus_NetworkError
    }
    public static var unknownFailure : UWP.MediaSourceAudioInputNodeCreationStatus {
        __x_ABI_CWindows_CMedia_CAudio_CMediaSourceAudioInputNodeCreationStatus_UnknownFailure
    }
}
extension UWP.MediaSourceAudioInputNodeCreationStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.MixedRealitySpatialAudioFormatPolicy {
    public static var useMixedRealityDefaultSpatialAudioFormat : UWP.MixedRealitySpatialAudioFormatPolicy {
        __x_ABI_CWindows_CMedia_CAudio_CMixedRealitySpatialAudioFormatPolicy_UseMixedRealityDefaultSpatialAudioFormat
    }
    public static var useDeviceConfigurationDefaultSpatialAudioFormat : UWP.MixedRealitySpatialAudioFormatPolicy {
        __x_ABI_CWindows_CMedia_CAudio_CMixedRealitySpatialAudioFormatPolicy_UseDeviceConfigurationDefaultSpatialAudioFormat
    }
}
extension UWP.MixedRealitySpatialAudioFormatPolicy: @retroactive Hashable, @retroactive Codable {}

extension UWP.QuantumSizeSelectionMode {
    public static var systemDefault : UWP.QuantumSizeSelectionMode {
        __x_ABI_CWindows_CMedia_CAudio_CQuantumSizeSelectionMode_SystemDefault
    }
    public static var lowestLatency : UWP.QuantumSizeSelectionMode {
        __x_ABI_CWindows_CMedia_CAudio_CQuantumSizeSelectionMode_LowestLatency
    }
    public static var closestToDesired : UWP.QuantumSizeSelectionMode {
        __x_ABI_CWindows_CMedia_CAudio_CQuantumSizeSelectionMode_ClosestToDesired
    }
}
extension UWP.QuantumSizeSelectionMode: @retroactive Hashable, @retroactive Codable {}

extension UWP.SetDefaultSpatialAudioFormatStatus {
    public static var succeeded : UWP.SetDefaultSpatialAudioFormatStatus {
        __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus_Succeeded
    }
    public static var accessDenied : UWP.SetDefaultSpatialAudioFormatStatus {
        __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus_AccessDenied
    }
    public static var licenseExpired : UWP.SetDefaultSpatialAudioFormatStatus {
        __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus_LicenseExpired
    }
    public static var licenseNotValidForAudioEndpoint : UWP.SetDefaultSpatialAudioFormatStatus {
        __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus_LicenseNotValidForAudioEndpoint
    }
    public static var notSupportedOnAudioEndpoint : UWP.SetDefaultSpatialAudioFormatStatus {
        __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus_NotSupportedOnAudioEndpoint
    }
    public static var unknownError : UWP.SetDefaultSpatialAudioFormatStatus {
        __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus_UnknownError
    }
}
extension UWP.SetDefaultSpatialAudioFormatStatus: @retroactive Hashable, @retroactive Codable {}

extension UWP.SpatialAudioModel {
    public static var objectBased : UWP.SpatialAudioModel {
        __x_ABI_CWindows_CMedia_CAudio_CSpatialAudioModel_ObjectBased
    }
    public static var foldDown : UWP.SpatialAudioModel {
        __x_ABI_CWindows_CMedia_CAudio_CSpatialAudioModel_FoldDown
    }
}
extension UWP.SpatialAudioModel: @retroactive Hashable, @retroactive Codable {}

