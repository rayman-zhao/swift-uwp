// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.direct3dbindings)
public typealias Direct3DBindings = __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DBindings
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.direct3dusage)
public typealias Direct3DUsage = __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DUsage
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.direct3dmultisampledescription)
public struct Direct3DMultisampleDescription: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.direct3dmultisampledescription.count)
    public var count: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.direct3dmultisampledescription.quality)
    public var quality: Int32 = 0
    public init() {}
    public init(count: Int32, quality: Int32) {
        self.count = count
        self.quality = quality
    }
    public static func from(abi: __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DMultisampleDescription) -> Direct3DMultisampleDescription {
        .init(count: abi.Count, quality: abi.Quality)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.direct3dsurfacedescription)
public struct Direct3DSurfaceDescription: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.direct3dsurfacedescription.width)
    public var width: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.direct3dsurfacedescription.height)
    public var height: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.direct3dsurfacedescription.format)
    public var format: UWP.DirectXPixelFormat = .init(0)
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.direct3dsurfacedescription.multisampledescription)
    public var multisampleDescription: Direct3DMultisampleDescription = .init()
    public init() {}
    public init(width: Int32, height: Int32, format: UWP.DirectXPixelFormat, multisampleDescription: Direct3DMultisampleDescription) {
        self.width = width
        self.height = height
        self.format = format
        self.multisampleDescription = multisampleDescription
    }
    public static func from(abi: __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DSurfaceDescription) -> Direct3DSurfaceDescription {
        .init(width: abi.Width, height: abi.Height, format: abi.Format, multisampleDescription: .from(abi: abi.MultisampleDescription))
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.idirect3ddevice)
public protocol IDirect3DDevice : WindowsFoundation.IClosable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.idirect3ddevice.trim)
    func trim() throws
}

extension IDirect3DDevice {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DDeviceWrapper.IID:
                let wrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DDeviceWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIDirect3DDevice = any IDirect3DDevice

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.idirect3dsurface)
public protocol IDirect3DSurface : WindowsFoundation.IClosable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.directx.direct3d11.idirect3dsurface.description)
    var description: UWP.Direct3DSurfaceDescription { get }
}

extension IDirect3DSurface {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper.IID:
                let wrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIDirect3DSurface = any IDirect3DSurface

extension UWP.Direct3DBindings {
    public static var vertexBuffer : UWP.Direct3DBindings {
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DBindings_VertexBuffer
    }
    public static var indexBuffer : UWP.Direct3DBindings {
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DBindings_IndexBuffer
    }
    public static var constantBuffer : UWP.Direct3DBindings {
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DBindings_ConstantBuffer
    }
    public static var shaderResource : UWP.Direct3DBindings {
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DBindings_ShaderResource
    }
    public static var streamOutput : UWP.Direct3DBindings {
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DBindings_StreamOutput
    }
    public static var renderTarget : UWP.Direct3DBindings {
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DBindings_RenderTarget
    }
    public static var depthStencil : UWP.Direct3DBindings {
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DBindings_DepthStencil
    }
    public static var unorderedAccess : UWP.Direct3DBindings {
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DBindings_UnorderedAccess
    }
    public static var decoder : UWP.Direct3DBindings {
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DBindings_Decoder
    }
    public static var videoEncoder : UWP.Direct3DBindings {
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DBindings_VideoEncoder
    }
}
extension UWP.Direct3DBindings: @retroactive Hashable, @retroactive Codable {}

extension UWP.Direct3DUsage {
    public static var `default` : UWP.Direct3DUsage {
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DUsage_Default
    }
    public static var immutable : UWP.Direct3DUsage {
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DUsage_Immutable
    }
    public static var dynamic : UWP.Direct3DUsage {
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DUsage_Dynamic
    }
    public static var staging : UWP.Direct3DUsage {
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DUsage_Staging
    }
}
extension UWP.Direct3DUsage: @retroactive Hashable, @retroactive Codable {}

