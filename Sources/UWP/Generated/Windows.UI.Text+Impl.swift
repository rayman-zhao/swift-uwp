// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public enum __IMPL_Windows_UI_Text {
    public enum ITextCharacterFormatBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CUI_CText_CITextCharacterFormat
        public typealias SwiftABI = __ABI_Windows_UI_Text.ITextCharacterFormat
        public typealias SwiftProjection = AnyITextCharacterFormat
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return ITextCharacterFormatImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_UI_Text.ITextCharacterFormatVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ITextCharacterFormatImpl: ITextCharacterFormat, WinRTAbiImpl {
        fileprivate typealias Bridge = ITextCharacterFormatBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.setclone)
        fileprivate func setClone(_ value: AnyITextCharacterFormat!) throws {
            try _default.SetCloneImpl(value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.getclone)
        fileprivate func getClone() throws -> AnyITextCharacterFormat! {
            try _default.GetCloneImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.isequal)
        fileprivate func isEqual(_ format: AnyITextCharacterFormat!) throws -> Bool {
            try _default.IsEqualImpl(format)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.allcaps)
        fileprivate var allCaps : FormatEffect {
            get { try! _default.get_AllCapsImpl() }
            set { try! _default.put_AllCapsImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.backgroundcolor)
        fileprivate var backgroundColor : UWP.Color {
            get { try! _default.get_BackgroundColorImpl() }
            set { try! _default.put_BackgroundColorImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.bold)
        fileprivate var bold : FormatEffect {
            get { try! _default.get_BoldImpl() }
            set { try! _default.put_BoldImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.fontstretch)
        fileprivate var fontStretch : FontStretch {
            get { try! _default.get_FontStretchImpl() }
            set { try! _default.put_FontStretchImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.fontstyle)
        fileprivate var fontStyle : FontStyle {
            get { try! _default.get_FontStyleImpl() }
            set { try! _default.put_FontStyleImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.foregroundcolor)
        fileprivate var foregroundColor : UWP.Color {
            get { try! _default.get_ForegroundColorImpl() }
            set { try! _default.put_ForegroundColorImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.hidden)
        fileprivate var hidden : FormatEffect {
            get { try! _default.get_HiddenImpl() }
            set { try! _default.put_HiddenImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.italic)
        fileprivate var italic : FormatEffect {
            get { try! _default.get_ItalicImpl() }
            set { try! _default.put_ItalicImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.kerning)
        fileprivate var kerning : Float {
            get { try! _default.get_KerningImpl() }
            set { try! _default.put_KerningImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.languagetag)
        fileprivate var languageTag : String {
            get { try! _default.get_LanguageTagImpl() }
            set { try! _default.put_LanguageTagImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.linktype)
        fileprivate var linkType : LinkType {
            get { try! _default.get_LinkTypeImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.name)
        fileprivate var name : String {
            get { try! _default.get_NameImpl() }
            set { try! _default.put_NameImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.outline)
        fileprivate var outline : FormatEffect {
            get { try! _default.get_OutlineImpl() }
            set { try! _default.put_OutlineImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.position)
        fileprivate var position : Float {
            get { try! _default.get_PositionImpl() }
            set { try! _default.put_PositionImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.protectedtext)
        fileprivate var protectedText : FormatEffect {
            get { try! _default.get_ProtectedTextImpl() }
            set { try! _default.put_ProtectedTextImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.size)
        fileprivate var size : Float {
            get { try! _default.get_SizeImpl() }
            set { try! _default.put_SizeImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.smallcaps)
        fileprivate var smallCaps : FormatEffect {
            get { try! _default.get_SmallCapsImpl() }
            set { try! _default.put_SmallCapsImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.spacing)
        fileprivate var spacing : Float {
            get { try! _default.get_SpacingImpl() }
            set { try! _default.put_SpacingImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.strikethrough)
        fileprivate var strikethrough : FormatEffect {
            get { try! _default.get_StrikethroughImpl() }
            set { try! _default.put_StrikethroughImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.subscript)
        fileprivate var `subscript` : FormatEffect {
            get { try! _default.get_SubscriptImpl() }
            set { try! _default.put_SubscriptImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.superscript)
        fileprivate var superscript : FormatEffect {
            get { try! _default.get_SuperscriptImpl() }
            set { try! _default.put_SuperscriptImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.textscript)
        fileprivate var textScript : TextScript {
            get { try! _default.get_TextScriptImpl() }
            set { try! _default.put_TextScriptImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.underline)
        fileprivate var underline : UnderlineType {
            get { try! _default.get_UnderlineImpl() }
            set { try! _default.put_UnderlineImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextcharacterformat.weight)
        fileprivate var weight : Int32 {
            get { try! _default.get_WeightImpl() }
            set { try! _default.put_WeightImpl(newValue) }
        }

    }

    public enum ITextDocumentBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CUI_CText_CITextDocument
        public typealias SwiftABI = __ABI_Windows_UI_Text.ITextDocument
        public typealias SwiftProjection = AnyITextDocument
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return ITextDocumentImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_UI_Text.ITextDocumentVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ITextDocumentImpl: ITextDocument, WinRTAbiImpl {
        fileprivate typealias Bridge = ITextDocumentBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.cancopy)
        fileprivate func canCopy() throws -> Bool {
            try _default.CanCopyImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.canpaste)
        fileprivate func canPaste() throws -> Bool {
            try _default.CanPasteImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.canredo)
        fileprivate func canRedo() throws -> Bool {
            try _default.CanRedoImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.canundo)
        fileprivate func canUndo() throws -> Bool {
            try _default.CanUndoImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.applydisplayupdates)
        fileprivate func applyDisplayUpdates() throws -> Int32 {
            try _default.ApplyDisplayUpdatesImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.batchdisplayupdates)
        fileprivate func batchDisplayUpdates() throws -> Int32 {
            try _default.BatchDisplayUpdatesImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.beginundogroup)
        fileprivate func beginUndoGroup() throws {
            try _default.BeginUndoGroupImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.endundogroup)
        fileprivate func endUndoGroup() throws {
            try _default.EndUndoGroupImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.getdefaultcharacterformat)
        fileprivate func getDefaultCharacterFormat() throws -> AnyITextCharacterFormat! {
            try _default.GetDefaultCharacterFormatImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.getdefaultparagraphformat)
        fileprivate func getDefaultParagraphFormat() throws -> AnyITextParagraphFormat! {
            try _default.GetDefaultParagraphFormatImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.getrange)
        fileprivate func getRange(_ startPosition: Int32, _ endPosition: Int32) throws -> AnyITextRange! {
            try _default.GetRangeImpl(startPosition, endPosition)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.getrangefrompoint)
        fileprivate func getRangeFromPoint(_ point: WindowsFoundation.Point, _ options: PointOptions) throws -> AnyITextRange! {
            try _default.GetRangeFromPointImpl(point, options)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.gettext)
        fileprivate func getText(_ options: TextGetOptions, _ value: inout String) throws {
            try _default.GetTextImpl(options, &value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.loadfromstream)
        fileprivate func loadFromStream(_ options: TextSetOptions, _ value: UWP.AnyIRandomAccessStream!) throws {
            try _default.LoadFromStreamImpl(options, value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.redo)
        fileprivate func redo() throws {
            try _default.RedoImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.savetostream)
        fileprivate func saveToStream(_ options: TextGetOptions, _ value: UWP.AnyIRandomAccessStream!) throws {
            try _default.SaveToStreamImpl(options, value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.setdefaultcharacterformat)
        fileprivate func setDefaultCharacterFormat(_ value: AnyITextCharacterFormat!) throws {
            try _default.SetDefaultCharacterFormatImpl(value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.setdefaultparagraphformat)
        fileprivate func setDefaultParagraphFormat(_ value: AnyITextParagraphFormat!) throws {
            try _default.SetDefaultParagraphFormatImpl(value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.settext)
        fileprivate func setText(_ options: TextSetOptions, _ value: String) throws {
            try _default.SetTextImpl(options, value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.undo)
        fileprivate func undo() throws {
            try _default.UndoImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.carettype)
        fileprivate var caretType : CaretType {
            get { try! _default.get_CaretTypeImpl() }
            set { try! _default.put_CaretTypeImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.defaulttabstop)
        fileprivate var defaultTabStop : Float {
            get { try! _default.get_DefaultTabStopImpl() }
            set { try! _default.put_DefaultTabStopImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.selection)
        fileprivate var selection : AnyITextSelection! {
            get { try! _default.get_SelectionImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextdocument.undolimit)
        fileprivate var undoLimit : UInt32 {
            get { try! _default.get_UndoLimitImpl() }
            set { try! _default.put_UndoLimitImpl(newValue) }
        }

    }

    public enum ITextParagraphFormatBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CUI_CText_CITextParagraphFormat
        public typealias SwiftABI = __ABI_Windows_UI_Text.ITextParagraphFormat
        public typealias SwiftProjection = AnyITextParagraphFormat
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return ITextParagraphFormatImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_UI_Text.ITextParagraphFormatVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ITextParagraphFormatImpl: ITextParagraphFormat, WinRTAbiImpl {
        fileprivate typealias Bridge = ITextParagraphFormatBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.addtab)
        fileprivate func addTab(_ position: Float, _ align: TabAlignment, _ leader: TabLeader) throws {
            try _default.AddTabImpl(position, align, leader)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.clearalltabs)
        fileprivate func clearAllTabs() throws {
            try _default.ClearAllTabsImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.deletetab)
        fileprivate func deleteTab(_ position: Float) throws {
            try _default.DeleteTabImpl(position)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.getclone)
        fileprivate func getClone() throws -> AnyITextParagraphFormat! {
            try _default.GetCloneImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.gettab)
        fileprivate func getTab(_ index: Int32, _ position: inout Float, _ align: inout TabAlignment, _ leader: inout TabLeader) throws {
            try _default.GetTabImpl(index, &position, &align, &leader)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.isequal)
        fileprivate func isEqual(_ format: AnyITextParagraphFormat!) throws -> Bool {
            try _default.IsEqualImpl(format)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.setclone)
        fileprivate func setClone(_ format: AnyITextParagraphFormat!) throws {
            try _default.SetCloneImpl(format)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.setindents)
        fileprivate func setIndents(_ start: Float, _ left: Float, _ right: Float) throws {
            try _default.SetIndentsImpl(start, left, right)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.setlinespacing)
        fileprivate func setLineSpacing(_ rule: LineSpacingRule, _ spacing: Float) throws {
            try _default.SetLineSpacingImpl(rule, spacing)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.alignment)
        fileprivate var alignment : ParagraphAlignment {
            get { try! _default.get_AlignmentImpl() }
            set { try! _default.put_AlignmentImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.firstlineindent)
        fileprivate var firstLineIndent : Float {
            get { try! _default.get_FirstLineIndentImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.keeptogether)
        fileprivate var keepTogether : FormatEffect {
            get { try! _default.get_KeepTogetherImpl() }
            set { try! _default.put_KeepTogetherImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.keepwithnext)
        fileprivate var keepWithNext : FormatEffect {
            get { try! _default.get_KeepWithNextImpl() }
            set { try! _default.put_KeepWithNextImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.leftindent)
        fileprivate var leftIndent : Float {
            get { try! _default.get_LeftIndentImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.linespacing)
        fileprivate var lineSpacing : Float {
            get { try! _default.get_LineSpacingImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.linespacingrule)
        fileprivate var lineSpacingRule : LineSpacingRule {
            get { try! _default.get_LineSpacingRuleImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.listalignment)
        fileprivate var listAlignment : MarkerAlignment {
            get { try! _default.get_ListAlignmentImpl() }
            set { try! _default.put_ListAlignmentImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.listlevelindex)
        fileprivate var listLevelIndex : Int32 {
            get { try! _default.get_ListLevelIndexImpl() }
            set { try! _default.put_ListLevelIndexImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.liststart)
        fileprivate var listStart : Int32 {
            get { try! _default.get_ListStartImpl() }
            set { try! _default.put_ListStartImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.liststyle)
        fileprivate var listStyle : MarkerStyle {
            get { try! _default.get_ListStyleImpl() }
            set { try! _default.put_ListStyleImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.listtab)
        fileprivate var listTab : Float {
            get { try! _default.get_ListTabImpl() }
            set { try! _default.put_ListTabImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.listtype)
        fileprivate var listType : MarkerType {
            get { try! _default.get_ListTypeImpl() }
            set { try! _default.put_ListTypeImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.nolinenumber)
        fileprivate var noLineNumber : FormatEffect {
            get { try! _default.get_NoLineNumberImpl() }
            set { try! _default.put_NoLineNumberImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.pagebreakbefore)
        fileprivate var pageBreakBefore : FormatEffect {
            get { try! _default.get_PageBreakBeforeImpl() }
            set { try! _default.put_PageBreakBeforeImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.rightindent)
        fileprivate var rightIndent : Float {
            get { try! _default.get_RightIndentImpl() }
            set { try! _default.put_RightIndentImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.righttoleft)
        fileprivate var rightToLeft : FormatEffect {
            get { try! _default.get_RightToLeftImpl() }
            set { try! _default.put_RightToLeftImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.spaceafter)
        fileprivate var spaceAfter : Float {
            get { try! _default.get_SpaceAfterImpl() }
            set { try! _default.put_SpaceAfterImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.spacebefore)
        fileprivate var spaceBefore : Float {
            get { try! _default.get_SpaceBeforeImpl() }
            set { try! _default.put_SpaceBeforeImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.style)
        fileprivate var style : ParagraphStyle {
            get { try! _default.get_StyleImpl() }
            set { try! _default.put_StyleImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.tabcount)
        fileprivate var tabCount : Int32 {
            get { try! _default.get_TabCountImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextparagraphformat.widowcontrol)
        fileprivate var widowControl : FormatEffect {
            get { try! _default.get_WidowControlImpl() }
            set { try! _default.put_WidowControlImpl(newValue) }
        }

    }

    public enum ITextRangeBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CUI_CText_CITextRange
        public typealias SwiftABI = __ABI_Windows_UI_Text.ITextRange
        public typealias SwiftProjection = AnyITextRange
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return ITextRangeImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_UI_Text.ITextRangeVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ITextRangeImpl: ITextRange, WinRTAbiImpl {
        fileprivate typealias Bridge = ITextRangeBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.canpaste)
        fileprivate func canPaste(_ format: Int32) throws -> Bool {
            try _default.CanPasteImpl(format)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.changecase)
        fileprivate func changeCase(_ value: LetterCase) throws {
            try _default.ChangeCaseImpl(value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.collapse)
        fileprivate func collapse(_ value: Bool) throws {
            try _default.CollapseImpl(value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.copy)
        fileprivate func copy() throws {
            try _default.CopyImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.cut)
        fileprivate func cut() throws {
            try _default.CutImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.delete)
        fileprivate func delete(_ unit: TextRangeUnit, _ count: Int32) throws -> Int32 {
            try _default.DeleteImpl(unit, count)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.endof)
        fileprivate func endOf(_ unit: TextRangeUnit, _ extend: Bool) throws -> Int32 {
            try _default.EndOfImpl(unit, extend)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.expand)
        fileprivate func expand(_ unit: TextRangeUnit) throws -> Int32 {
            try _default.ExpandImpl(unit)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.findtext)
        fileprivate func findText(_ value: String, _ scanLength: Int32, _ options: FindOptions) throws -> Int32 {
            try _default.FindTextImpl(value, scanLength, options)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.getcharacterutf32)
        fileprivate func getCharacterUtf32(_ value: inout UInt32, _ offset: Int32) throws {
            try _default.GetCharacterUtf32Impl(&value, offset)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.getclone)
        fileprivate func getClone() throws -> AnyITextRange! {
            try _default.GetCloneImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.getindex)
        fileprivate func getIndex(_ unit: TextRangeUnit) throws -> Int32 {
            try _default.GetIndexImpl(unit)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.getpoint)
        fileprivate func getPoint(_ horizontalAlign: HorizontalCharacterAlignment, _ verticalAlign: VerticalCharacterAlignment, _ options: PointOptions, _ point: inout WindowsFoundation.Point) throws {
            try _default.GetPointImpl(horizontalAlign, verticalAlign, options, &point)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.getrect)
        fileprivate func getRect(_ options: PointOptions, _ rect: inout WindowsFoundation.Rect, _ hit: inout Int32) throws {
            try _default.GetRectImpl(options, &rect, &hit)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.gettext)
        fileprivate func getText(_ options: TextGetOptions, _ value: inout String) throws {
            try _default.GetTextImpl(options, &value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.gettextviastream)
        fileprivate func getTextViaStream(_ options: TextGetOptions, _ value: UWP.AnyIRandomAccessStream!) throws {
            try _default.GetTextViaStreamImpl(options, value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.inrange)
        fileprivate func inRange(_ range: AnyITextRange!) throws -> Bool {
            try _default.InRangeImpl(range)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.insertimage)
        fileprivate func insertImage(_ width: Int32, _ height: Int32, _ ascent: Int32, _ verticalAlign: VerticalCharacterAlignment, _ alternateText: String, _ value: UWP.AnyIRandomAccessStream!) throws {
            try _default.InsertImageImpl(width, height, ascent, verticalAlign, alternateText, value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.instory)
        fileprivate func inStory(_ range: AnyITextRange!) throws -> Bool {
            try _default.InStoryImpl(range)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.isequal)
        fileprivate func isEqual(_ range: AnyITextRange!) throws -> Bool {
            try _default.IsEqualImpl(range)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.move)
        fileprivate func move(_ unit: TextRangeUnit, _ count: Int32) throws -> Int32 {
            try _default.MoveImpl(unit, count)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.moveend)
        fileprivate func moveEnd(_ unit: TextRangeUnit, _ count: Int32) throws -> Int32 {
            try _default.MoveEndImpl(unit, count)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.movestart)
        fileprivate func moveStart(_ unit: TextRangeUnit, _ count: Int32) throws -> Int32 {
            try _default.MoveStartImpl(unit, count)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.paste)
        fileprivate func paste(_ format: Int32) throws {
            try _default.PasteImpl(format)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.scrollintoview)
        fileprivate func scrollIntoView(_ value: PointOptions) throws {
            try _default.ScrollIntoViewImpl(value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.matchselection)
        fileprivate func matchSelection() throws {
            try _default.MatchSelectionImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.setindex)
        fileprivate func setIndex(_ unit: TextRangeUnit, _ index: Int32, _ extend: Bool) throws {
            try _default.SetIndexImpl(unit, index, extend)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.setpoint)
        fileprivate func setPoint(_ point: WindowsFoundation.Point, _ options: PointOptions, _ extend: Bool) throws {
            try _default.SetPointImpl(point, options, extend)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.setrange)
        fileprivate func setRange(_ startPosition: Int32, _ endPosition: Int32) throws {
            try _default.SetRangeImpl(startPosition, endPosition)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.settext)
        fileprivate func setText(_ options: TextSetOptions, _ value: String) throws {
            try _default.SetTextImpl(options, value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.settextviastream)
        fileprivate func setTextViaStream(_ options: TextSetOptions, _ value: UWP.AnyIRandomAccessStream!) throws {
            try _default.SetTextViaStreamImpl(options, value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.startof)
        fileprivate func startOf(_ unit: TextRangeUnit, _ extend: Bool) throws -> Int32 {
            try _default.StartOfImpl(unit, extend)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.character)
        fileprivate var character : Character {
            get { try! _default.get_CharacterImpl() }
            set { try! _default.put_CharacterImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.characterformat)
        fileprivate var characterFormat : AnyITextCharacterFormat! {
            get { try! _default.get_CharacterFormatImpl() }
            set { try! _default.put_CharacterFormatImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.endposition)
        fileprivate var endPosition : Int32 {
            get { try! _default.get_EndPositionImpl() }
            set { try! _default.put_EndPositionImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.formattedtext)
        fileprivate var formattedText : AnyITextRange! {
            get { try! _default.get_FormattedTextImpl() }
            set { try! _default.put_FormattedTextImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.gravity)
        fileprivate var gravity : RangeGravity {
            get { try! _default.get_GravityImpl() }
            set { try! _default.put_GravityImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.length)
        fileprivate var length : Int32 {
            get { try! _default.get_LengthImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.link)
        fileprivate var link : String {
            get { try! _default.get_LinkImpl() }
            set { try! _default.put_LinkImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.paragraphformat)
        fileprivate var paragraphFormat : AnyITextParagraphFormat! {
            get { try! _default.get_ParagraphFormatImpl() }
            set { try! _default.put_ParagraphFormatImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.startposition)
        fileprivate var startPosition : Int32 {
            get { try! _default.get_StartPositionImpl() }
            set { try! _default.put_StartPositionImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.storylength)
        fileprivate var storyLength : Int32 {
            get { try! _default.get_StoryLengthImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextrange.text)
        fileprivate var text : String {
            get { try! _default.get_TextImpl() }
            set { try! _default.put_TextImpl(newValue) }
        }

    }

    public enum ITextSelectionBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CUI_CText_CITextSelection
        public typealias SwiftABI = __ABI_Windows_UI_Text.ITextSelection
        public typealias SwiftProjection = AnyITextSelection
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return ITextSelectionImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_UI_Text.ITextSelectionVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ITextSelectionImpl: ITextSelection, WinRTAbiImpl {
        fileprivate typealias Bridge = ITextSelectionBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.endkey)
        fileprivate func endKey(_ unit: TextRangeUnit, _ extend: Bool) throws -> Int32 {
            try _default.EndKeyImpl(unit, extend)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.homekey)
        fileprivate func homeKey(_ unit: TextRangeUnit, _ extend: Bool) throws -> Int32 {
            try _default.HomeKeyImpl(unit, extend)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.movedown)
        fileprivate func moveDown(_ unit: TextRangeUnit, _ count: Int32, _ extend: Bool) throws -> Int32 {
            try _default.MoveDownImpl(unit, count, extend)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.moveleft)
        fileprivate func moveLeft(_ unit: TextRangeUnit, _ count: Int32, _ extend: Bool) throws -> Int32 {
            try _default.MoveLeftImpl(unit, count, extend)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.moveright)
        fileprivate func moveRight(_ unit: TextRangeUnit, _ count: Int32, _ extend: Bool) throws -> Int32 {
            try _default.MoveRightImpl(unit, count, extend)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.moveup)
        fileprivate func moveUp(_ unit: TextRangeUnit, _ count: Int32, _ extend: Bool) throws -> Int32 {
            try _default.MoveUpImpl(unit, count, extend)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.typetext)
        fileprivate func typeText(_ value: String) throws {
            try _default.TypeTextImpl(value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.options)
        fileprivate var options : SelectionOptions {
            get { try! _default.get_OptionsImpl() }
            set { try! _default.put_OptionsImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.type)
        fileprivate var type : SelectionType {
            get { try! _default.get_TypeImpl() }
        }

        private lazy var _ITextRange: __ABI_Windows_UI_Text.ITextRange! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.canpaste)
        fileprivate func canPaste(_ format: Int32) throws -> Bool {
            try _ITextRange.CanPasteImpl(format)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.changecase)
        fileprivate func changeCase(_ value: LetterCase) throws {
            try _ITextRange.ChangeCaseImpl(value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.collapse)
        fileprivate func collapse(_ value: Bool) throws {
            try _ITextRange.CollapseImpl(value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.copy)
        fileprivate func copy() throws {
            try _ITextRange.CopyImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.cut)
        fileprivate func cut() throws {
            try _ITextRange.CutImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.delete)
        fileprivate func delete(_ unit: TextRangeUnit, _ count: Int32) throws -> Int32 {
            try _ITextRange.DeleteImpl(unit, count)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.endof)
        fileprivate func endOf(_ unit: TextRangeUnit, _ extend: Bool) throws -> Int32 {
            try _ITextRange.EndOfImpl(unit, extend)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.expand)
        fileprivate func expand(_ unit: TextRangeUnit) throws -> Int32 {
            try _ITextRange.ExpandImpl(unit)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.findtext)
        fileprivate func findText(_ value: String, _ scanLength: Int32, _ options: FindOptions) throws -> Int32 {
            try _ITextRange.FindTextImpl(value, scanLength, options)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.getcharacterutf32)
        fileprivate func getCharacterUtf32(_ value: inout UInt32, _ offset: Int32) throws {
            try _ITextRange.GetCharacterUtf32Impl(&value, offset)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.getclone)
        fileprivate func getClone() throws -> AnyITextRange! {
            try _ITextRange.GetCloneImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.getindex)
        fileprivate func getIndex(_ unit: TextRangeUnit) throws -> Int32 {
            try _ITextRange.GetIndexImpl(unit)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.getpoint)
        fileprivate func getPoint(_ horizontalAlign: HorizontalCharacterAlignment, _ verticalAlign: VerticalCharacterAlignment, _ options: PointOptions, _ point: inout WindowsFoundation.Point) throws {
            try _ITextRange.GetPointImpl(horizontalAlign, verticalAlign, options, &point)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.getrect)
        fileprivate func getRect(_ options: PointOptions, _ rect: inout WindowsFoundation.Rect, _ hit: inout Int32) throws {
            try _ITextRange.GetRectImpl(options, &rect, &hit)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.gettext)
        fileprivate func getText(_ options: TextGetOptions, _ value: inout String) throws {
            try _ITextRange.GetTextImpl(options, &value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.gettextviastream)
        fileprivate func getTextViaStream(_ options: TextGetOptions, _ value: UWP.AnyIRandomAccessStream!) throws {
            try _ITextRange.GetTextViaStreamImpl(options, value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.inrange)
        fileprivate func inRange(_ range: AnyITextRange!) throws -> Bool {
            try _ITextRange.InRangeImpl(range)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.insertimage)
        fileprivate func insertImage(_ width: Int32, _ height: Int32, _ ascent: Int32, _ verticalAlign: VerticalCharacterAlignment, _ alternateText: String, _ value: UWP.AnyIRandomAccessStream!) throws {
            try _ITextRange.InsertImageImpl(width, height, ascent, verticalAlign, alternateText, value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.instory)
        fileprivate func inStory(_ range: AnyITextRange!) throws -> Bool {
            try _ITextRange.InStoryImpl(range)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.isequal)
        fileprivate func isEqual(_ range: AnyITextRange!) throws -> Bool {
            try _ITextRange.IsEqualImpl(range)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.move)
        fileprivate func move(_ unit: TextRangeUnit, _ count: Int32) throws -> Int32 {
            try _ITextRange.MoveImpl(unit, count)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.moveend)
        fileprivate func moveEnd(_ unit: TextRangeUnit, _ count: Int32) throws -> Int32 {
            try _ITextRange.MoveEndImpl(unit, count)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.movestart)
        fileprivate func moveStart(_ unit: TextRangeUnit, _ count: Int32) throws -> Int32 {
            try _ITextRange.MoveStartImpl(unit, count)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.paste)
        fileprivate func paste(_ format: Int32) throws {
            try _ITextRange.PasteImpl(format)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.scrollintoview)
        fileprivate func scrollIntoView(_ value: PointOptions) throws {
            try _ITextRange.ScrollIntoViewImpl(value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.matchselection)
        fileprivate func matchSelection() throws {
            try _ITextRange.MatchSelectionImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.setindex)
        fileprivate func setIndex(_ unit: TextRangeUnit, _ index: Int32, _ extend: Bool) throws {
            try _ITextRange.SetIndexImpl(unit, index, extend)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.setpoint)
        fileprivate func setPoint(_ point: WindowsFoundation.Point, _ options: PointOptions, _ extend: Bool) throws {
            try _ITextRange.SetPointImpl(point, options, extend)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.setrange)
        fileprivate func setRange(_ startPosition: Int32, _ endPosition: Int32) throws {
            try _ITextRange.SetRangeImpl(startPosition, endPosition)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.settext)
        fileprivate func setText(_ options: TextSetOptions, _ value: String) throws {
            try _ITextRange.SetTextImpl(options, value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.settextviastream)
        fileprivate func setTextViaStream(_ options: TextSetOptions, _ value: UWP.AnyIRandomAccessStream!) throws {
            try _ITextRange.SetTextViaStreamImpl(options, value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.startof)
        fileprivate func startOf(_ unit: TextRangeUnit, _ extend: Bool) throws -> Int32 {
            try _ITextRange.StartOfImpl(unit, extend)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.character)
        fileprivate var character : Character {
            get { try! _ITextRange.get_CharacterImpl() }
            set { try! _ITextRange.put_CharacterImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.characterformat)
        fileprivate var characterFormat : AnyITextCharacterFormat! {
            get { try! _ITextRange.get_CharacterFormatImpl() }
            set { try! _ITextRange.put_CharacterFormatImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.endposition)
        fileprivate var endPosition : Int32 {
            get { try! _ITextRange.get_EndPositionImpl() }
            set { try! _ITextRange.put_EndPositionImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.formattedtext)
        fileprivate var formattedText : AnyITextRange! {
            get { try! _ITextRange.get_FormattedTextImpl() }
            set { try! _ITextRange.put_FormattedTextImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.gravity)
        fileprivate var gravity : RangeGravity {
            get { try! _ITextRange.get_GravityImpl() }
            set { try! _ITextRange.put_GravityImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.length)
        fileprivate var length : Int32 {
            get { try! _ITextRange.get_LengthImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.link)
        fileprivate var link : String {
            get { try! _ITextRange.get_LinkImpl() }
            set { try! _ITextRange.put_LinkImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.paragraphformat)
        fileprivate var paragraphFormat : AnyITextParagraphFormat! {
            get { try! _ITextRange.get_ParagraphFormatImpl() }
            set { try! _ITextRange.put_ParagraphFormatImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.startposition)
        fileprivate var startPosition : Int32 {
            get { try! _ITextRange.get_StartPositionImpl() }
            set { try! _ITextRange.put_StartPositionImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.storylength)
        fileprivate var storyLength : Int32 {
            get { try! _ITextRange.get_StoryLengthImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.itextselection.text)
        fileprivate var text : String {
            get { try! _ITextRange.get_TextImpl() }
            set { try! _ITextRange.put_TextImpl(newValue) }
        }

    }

}
