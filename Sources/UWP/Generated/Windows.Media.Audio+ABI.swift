// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode: WindowsFoundation.IID {
    .init(Data1: 0xB01B6BE1, Data2: 0x6F4E, Data3: 0x49E2, Data4: ( 0xAC,0x01,0x55,0x9D,0x62,0xBE,0xB3,0xA9 ))// B01B6BE1-6F4E-49E2-AC01-559D62BEB3A9
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode: WindowsFoundation.IID {
    .init(Data1: 0x362EDBFF, Data2: 0xFF1C, Data3: 0x4434, Data4: ( 0x9E,0x0F,0xBD,0x2E,0xF5,0x22,0xAC,0x82 ))// 362EDBFF-FF1C-4434-9E0F-BD2EF522AC82
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode: WindowsFoundation.IID {
    .init(Data1: 0x905B67C8, Data2: 0x6F65, Data3: 0x4CD4, Data4: ( 0x88,0x90,0x46,0x94,0x84,0x3C,0x27,0x6D ))// 905B67C8-6F65-4CD4-8890-4694843C276D
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode: WindowsFoundation.IID {
    .init(Data1: 0x50E01980, Data2: 0x5166, Data3: 0x4093, Data4: ( 0x80,0xF8,0xAD,0xA0,0x00,0x89,0xE9,0xCF ))// 50E01980-5166-4093-80F8-ADA00089E9CF
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xDC7C829E, Data2: 0x0208, Data3: 0x4504, Data4: ( 0xA5,0xA8,0xF0,0xF2,0x68,0x92,0x0A,0x65 ))// DC7C829E-0208-4504-A5A8-F0F268920A65
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode: WindowsFoundation.IID {
    .init(Data1: 0x01B266C7, Data2: 0xFD96, Data3: 0x4FF5, Data4: ( 0xA3,0xC5,0xD2,0x7A,0x9B,0xF4,0x42,0x37 ))// 01B266C7-FD96-4FF5-A3C5-D27A9BF44237
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode: WindowsFoundation.IID {
    .init(Data1: 0xB847371B, Data2: 0x3299, Data3: 0x45F5, Data4: ( 0x88,0xB3,0xC9,0xD1,0x2A,0x3F,0x1C,0xC8 ))// B847371B-3299-45F5-88B3-C9D12A3F1CC8
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraph: WindowsFoundation.IID {
    .init(Data1: 0x1AD46EED, Data2: 0xE48C, Data3: 0x4E14, Data4: ( 0x96,0x60,0x2C,0x4F,0x83,0xE9,0xCD,0xD8 ))// 1AD46EED-E48C-4E14-9660-2C4F83E9CDD8
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2: WindowsFoundation.IID {
    .init(Data1: 0x4E4C3BD5, Data2: 0x4FC1, Data3: 0x45F6, Data4: ( 0xA9,0x47,0x3C,0xD3,0x8F,0x4F,0xD8,0x39 ))// 4E4C3BD5-4FC1-45F6-A947-3CD38F4FD839
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3: WindowsFoundation.IID {
    .init(Data1: 0xDDCD25AE, Data2: 0x1185, Data3: 0x42A7, Data4: ( 0x83,0x1D,0x6A,0x9B,0x0F,0xC8,0x68,0x20 ))// DDCD25AE-1185-42A7-831D-6A9B0FC86820
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection: WindowsFoundation.IID {
    .init(Data1: 0x763070ED, Data2: 0xD04E, Data3: 0x4FAC, Data4: ( 0xB2,0x33,0x60,0x0B,0x42,0xED,0xD4,0x69 ))// 763070ED-D04E-4FAC-B233-600B42EDD469
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings: WindowsFoundation.IID {
    .init(Data1: 0x1D59647F, Data2: 0xE6FE, Data3: 0x4628, Data4: ( 0x84,0xF8,0x9D,0x8B,0xDB,0xA2,0x57,0x85 ))// 1D59647F-E6FE-4628-84F8-9D8BDBA25785
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2: WindowsFoundation.IID {
    .init(Data1: 0x72919787, Data2: 0x4DAB, Data3: 0x46E3, Data4: ( 0xB4,0xC9,0xD8,0xE1,0xA2,0x63,0x60,0x62 ))// 72919787-4DAB-46E3-B4C9-D8E1A2636062
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory: WindowsFoundation.IID {
    .init(Data1: 0xA5D91CC6, Data2: 0xC2EB, Data3: 0x4A61, Data4: ( 0xA2,0x14,0x1D,0x66,0xD7,0x5F,0x83,0xDA ))// A5D91CC6-C2EB-4A61-A214-1D66D75F83DA
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics: WindowsFoundation.IID {
    .init(Data1: 0x76EC3132, Data2: 0xE159, Data3: 0x4AB7, Data4: ( 0xA8,0x2A,0x17,0xBE,0xB4,0xB3,0x1E,0x94 ))// 76EC3132-E159-4AB7-A82A-17BEB4B31E94
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xC3D9CBE0, Data2: 0x3FF6, Data3: 0x4FB3, Data4: ( 0xB2,0x62,0x50,0xD4,0x35,0xC5,0x54,0x23 ))// C3D9CBE0-3FF6-4FB3-B262-50D435C55423
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode: WindowsFoundation.IID {
    .init(Data1: 0xD148005C, Data2: 0x8428, Data3: 0x4784, Data4: ( 0xB7,0xFD,0xA9,0x9D,0x46,0x8C,0x5D,0x20 ))// D148005C-8428-4784-B7FD-A99D468C5D20
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2: WindowsFoundation.IID {
    .init(Data1: 0x905156B7, Data2: 0xCA68, Data3: 0x4C6D, Data4: ( 0xA8,0xBC,0xE3,0xEE,0x17,0xFE,0x3F,0xD2 ))// 905156B7-CA68-4C6D-A8BC-E3EE17FE3FD2
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNode: WindowsFoundation.IID {
    .init(Data1: 0x15389D7F, Data2: 0xDBD8, Data3: 0x4819, Data4: ( 0xBF,0x03,0x66,0x8E,0x93,0x57,0xCD,0x6D ))// 15389D7F-DBD8-4819-BF03-668E9357CD6D
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter: WindowsFoundation.IID {
    .init(Data1: 0x3676971D, Data2: 0x880A, Data3: 0x47B8, Data4: ( 0xAD,0xF7,0x13,0x23,0xA9,0xD9,0x65,0xBE ))// 3676971D-880A-47B8-ADF7-1323A9D965BE
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2: WindowsFoundation.IID {
    .init(Data1: 0x4AB6EECB, Data2: 0xEC29, Data3: 0x47F8, Data4: ( 0x81,0x8C,0xB6,0xB6,0x60,0xA5,0xAE,0xB1 ))// 4AB6EECB-EC29-47F8-818C-B6B660A5AEB1
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties: WindowsFoundation.IID {
    .init(Data1: 0xE99B2CEE, Data2: 0x02CA, Data3: 0x4375, Data4: ( 0x93,0x26,0x0C,0x6A,0xE4,0xBC,0xDF,0xB5 ))// E99B2CEE-02CA-4375-9326-0C6AE4BCDFB5
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel: WindowsFoundation.IID {
    .init(Data1: 0x1D1D5AF7, Data2: 0x0D53, Data3: 0x4FA9, Data4: ( 0xBD,0x84,0xD5,0x81,0x6A,0x86,0xF3,0xFF ))// 1D1D5AF7-0D53-4FA9-BD84-D5816A86F3FF
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics: WindowsFoundation.IID {
    .init(Data1: 0xC7787CA8, Data2: 0xF178, Data3: 0x462F, Data4: ( 0xBC,0x81,0x8D,0xD5,0xCB,0xE5,0xDA,0xE8 ))// C7787CA8-F178-462F-BC81-8DD5CBE5DAE8
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory: WindowsFoundation.IID {
    .init(Data1: 0xFDC8489A, Data2: 0x6AD6, Data3: 0x4CE4, Data4: ( 0xB7,0xF7,0xA9,0x93,0x70,0xDF,0x7E,0xE9 ))// FDC8489A-6AD6-4CE4-B7F7-A99370DF7EE9
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties: WindowsFoundation.IID {
    .init(Data1: 0x48934BCF, Data2: 0xCF2C, Data3: 0x4EFC, Data4: ( 0x93,0x31,0x75,0xBD,0x22,0xDF,0x1F,0x0C ))// 48934BCF-CF2C-4EFC-9331-75BD22DF1F0C
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape: WindowsFoundation.IID {
    .init(Data1: 0xEA0311C5, Data2: 0xE73D, Data3: 0x44BC, Data4: ( 0x85,0x9C,0x45,0x55,0x3B,0xBC,0x48,0x28 ))// EA0311C5-E73D-44BC-859C-45553BBC4828
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics: WindowsFoundation.IID {
    .init(Data1: 0x57BB2771, Data2: 0xFFA5, Data3: 0x4B86, Data4: ( 0xA7,0x79,0xE2,0x64,0xAE,0xB9,0x14,0x5F ))// 57BB2771-FFA5-4B86-A779-E264AEB9145F
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener: WindowsFoundation.IID {
    .init(Data1: 0xD9722E16, Data2: 0x0C0A, Data3: 0x41DA, Data4: ( 0xB7,0x55,0x6C,0x77,0x83,0x5F,0xB1,0xEB ))// D9722E16-0C0A-41DA-B755-6C77835FB1EB
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener: WindowsFoundation.IID {
    .init(Data1: 0x0E0F907C, Data2: 0x79FF, Data3: 0x4544, Data4: ( 0x9E,0xEB,0x01,0x25,0x7B,0x15,0x10,0x5A ))// 0E0F907C-79FF-4544-9EEB-01257B15105A
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor: WindowsFoundation.IID {
    .init(Data1: 0x1D13D136, Data2: 0x0199, Data3: 0x4CDC, Data4: ( 0xB8,0x4E,0xE7,0x2C,0x2B,0x58,0x1E,0xCE ))// 1D13D136-0199-4CDC-B84E-E72C2B581ECE
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics: WindowsFoundation.IID {
    .init(Data1: 0x6374EA4C, Data2: 0x1B3B, Data3: 0x4001, Data4: ( 0x94,0xD9,0xDD,0x22,0x53,0x30,0xFA,0x40 ))// 6374EA4C-1B3B-4001-94D9-DD225330FA40
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult: WindowsFoundation.IID {
    .init(Data1: 0x16EEC7A8, Data2: 0x1CA7, Data3: 0x40EF, Data4: ( 0x91,0xA4,0xD3,0x46,0xE0,0xAA,0x1B,0xBA ))// 16EEC7A8-1CA7-40EF-91A4-D346E0AA1BBA
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2: WindowsFoundation.IID {
    .init(Data1: 0x921C69CE, Data2: 0x3F35, Data3: 0x41C7, Data4: ( 0x96,0x22,0x79,0xF6,0x08,0xBA,0xED,0xC2 ))// 921C69CE-3F35-41C7-9622-79F608BAEDC2
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult: WindowsFoundation.IID {
    .init(Data1: 0xF7776D27, Data2: 0x1D9A, Data3: 0x47F7, Data4: ( 0x9C,0xD4,0x28,0x59,0xCC,0x1B,0x7B,0xFF ))// F7776D27-1D9A-47F7-9CD4-2859CC1B7BFF
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2: WindowsFoundation.IID {
    .init(Data1: 0x4864269F, Data2: 0xBDCE, Data3: 0x4AB1, Data4: ( 0xBD,0x38,0xFB,0xAE,0x93,0xAE,0xDA,0xCA ))// 4864269F-BDCE-4AB1-BD38-FBAE93AEDACA
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult: WindowsFoundation.IID {
    .init(Data1: 0xCE83D61C, Data2: 0xE297, Data3: 0x4C50, Data4: ( 0x9C,0xE7,0x1C,0x7A,0x69,0xD6,0xBD,0x09 ))// CE83D61C-E297-4C50-9CE7-1C7A69D6BD09
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2: WindowsFoundation.IID {
    .init(Data1: 0xF9082020, Data2: 0x3D80, Data3: 0x4FE0, Data4: ( 0x81,0xC1,0x76,0x8F,0xEA,0x7C,0xA7,0xE0 ))// F9082020-3D80-4FE0-81C1-768FEA7CA7E0
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult: WindowsFoundation.IID {
    .init(Data1: 0x47D6BA7B, Data2: 0xE909, Data3: 0x453F, Data4: ( 0x86,0x6E,0x55,0x40,0xCD,0xA7,0x34,0xFF ))// 47D6BA7B-E909-453F-866E-5540CDA734FF
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2: WindowsFoundation.IID {
    .init(Data1: 0x9F01B50D, Data2: 0x3318, Data3: 0x47B3, Data4: ( 0xA6,0x0A,0x1B,0x49,0x2B,0xE7,0xFC,0x0D ))// 9F01B50D-3318-47B3-A60A-1B492BE7FC0D
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult: WindowsFoundation.IID {
    .init(Data1: 0x5453EF7E, Data2: 0x7BDE, Data3: 0x4B76, Data4: ( 0xBB,0x5D,0x48,0xF7,0x9C,0xFC,0x8C,0x0B ))// 5453EF7E-7BDE-4B76-BB5D-48F79CFC8C0B
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2: WindowsFoundation.IID {
    .init(Data1: 0x6D738DFC, Data2: 0x88C6, Data3: 0x4FCB, Data4: ( 0xA5,0x34,0x85,0xCE,0xDD,0x40,0x50,0xA1 ))// 6D738DFC-88C6-4FCB-A534-85CEDD4050A1
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult: WindowsFoundation.IID {
    .init(Data1: 0x46A658A3, Data2: 0x53C0, Data3: 0x4D59, Data4: ( 0x9E,0x51,0xCC,0x1D,0x10,0x44,0xA4,0xC4 ))// 46A658A3-53C0-4D59-9E51-CC1D1044A4C4
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2: WindowsFoundation.IID {
    .init(Data1: 0x63514CE8, Data2: 0x6A1A, Data3: 0x49E3, Data4: ( 0x97,0xEC,0x28,0xFD,0x5B,0xE1,0x14,0xE5 ))// 63514CE8-6A1A-49E3-97EC-28FD5BE114E5
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition: WindowsFoundation.IID {
    .init(Data1: 0x0E4D3FAA, Data2: 0x36B8, Data3: 0x4C91, Data4: ( 0xB9,0xDA,0x11,0xF4,0x4A,0x8A,0x66,0x10 ))// 0E4D3FAA-36B8-4C91-B9DA-11F44A8A6610
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory: WindowsFoundation.IID {
    .init(Data1: 0x0D4E2257, Data2: 0xAAF2, Data3: 0x4E86, Data4: ( 0xA5,0x4C,0xFB,0x79,0xDB,0x8F,0x6C,0x12 ))// 0D4E2257-AAF2-4E86-A54C-FB79DB8F6C12
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand: WindowsFoundation.IID {
    .init(Data1: 0xC00A5A6A, Data2: 0x262D, Data3: 0x4B85, Data4: ( 0x9B,0xB7,0x43,0x28,0x0B,0x62,0xED,0x0C ))// C00A5A6A-262D-4B85-9BB7-43280B62ED0C
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition: WindowsFoundation.IID {
    .init(Data1: 0x023F6F1F, Data2: 0x83FE, Data3: 0x449A, Data4: ( 0xA8,0x22,0xC6,0x96,0x44,0x2D,0x16,0xB0 ))// 023F6F1F-83FE-449A-A822-C696442D16B0
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory: WindowsFoundation.IID {
    .init(Data1: 0xD2876FC4, Data2: 0xD410, Data3: 0x4EB5, Data4: ( 0x9E,0x69,0xC9,0xAA,0x12,0x77,0xEA,0xF0 ))// D2876FC4-D410-4EB5-9E69-C9AA1277EAF0
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x3D9BD498, Data2: 0xA306, Data3: 0x4F06, Data4: ( 0xBD,0x9F,0xE9,0xEF,0xC8,0x22,0x63,0x04 ))// 3D9BD498-A306-4F06-BD9F-E9EFC8226304
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition: WindowsFoundation.IID {
    .init(Data1: 0x6B755D19, Data2: 0x2603, Data3: 0x47BA, Data4: ( 0xBD,0xEB,0x39,0x05,0x5E,0x34,0x86,0xDC ))// 6B755D19-2603-47BA-BDEB-39055E3486DC
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory: WindowsFoundation.IID {
    .init(Data1: 0xECBAE6F1, Data2: 0x61FF, Data3: 0x45EF, Data4: ( 0xB8,0xF5,0x48,0x65,0x9A,0x57,0xC7,0x2D ))// ECBAE6F1-61FF-45EF-B8F5-48659A57C72D
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode: WindowsFoundation.IID {
    .init(Data1: 0x99D8983B, Data2: 0xA88A, Data3: 0x4041, Data4: ( 0x8E,0x4F,0xDD,0xBA,0xC0,0xC9,0x1F,0xD3 ))// 99D8983B-A88A-4041-8E4F-DDBAC0C91FD3
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition: WindowsFoundation.IID {
    .init(Data1: 0x4606AA89, Data2: 0xF563, Data3: 0x4D0A, Data4: ( 0x8F,0x6E,0xF0,0xCD,0xDF,0xF3,0x5D,0x84 ))// 4606AA89-F563-4D0A-8F6E-F0CDDFF35D84
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory: WindowsFoundation.IID {
    .init(Data1: 0xA7D5CBFE, Data2: 0x100B, Data3: 0x4FF0, Data4: ( 0x9D,0xA6,0xDC,0x4E,0x05,0xA7,0x59,0xF0 ))// A7D5CBFE-100B-4FF0-9DA6-DC4E05A759F0
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult: WindowsFoundation.IID {
    .init(Data1: 0x1C2AA511, Data2: 0x1400, Data3: 0x5E70, Data4: ( 0x9E,0xA9,0xAE,0x15,0x12,0x41,0xE8,0xEA ))// 1C2AA511-1400-5E70-9EA9-AE151241E8EA
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration: WindowsFoundation.IID {
    .init(Data1: 0xEE830034, Data2: 0x61CF, Data3: 0x5749, Data4: ( 0x9D,0xA4,0x10,0xF0,0xFE,0x02,0x81,0x99 ))// EE830034-61CF-5749-9DA4-10F0FE028199
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics: WindowsFoundation.IID {
    .init(Data1: 0x3EC37F7B, Data2: 0x936D, Data3: 0x4E04, Data4: ( 0x97,0x28,0x28,0x27,0xD9,0xF7,0x58,0xC4 ))// 3EC37F7B-936D-4E04-9728-2827D9F758C4
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration: WindowsFoundation.IID {
    .init(Data1: 0x32DF09A8, Data2: 0x50F0, Data3: 0x5395, Data4: ( 0x99,0x23,0x7D,0x44,0xCA,0x71,0xED,0x6D ))// 32DF09A8-50F0-5395-9923-7D44CA71ED6D
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics: WindowsFoundation.IID {
    .init(Data1: 0x2B5FEF71, Data2: 0x67C9, Data3: 0x4E5F, Data4: ( 0xA3,0x5B,0x41,0x68,0x07,0x11,0xF8,0xC7 ))// 2B5FEF71-67C9-4E5F-A35B-41680711F8C7
}

private var IID___x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics: WindowsFoundation.IID {
    .init(Data1: 0xB3DE8A47, Data2: 0x83EE, Data3: 0x4266, Data4: ( 0xA9,0x45,0xBE,0xDF,0x50,0x7A,0xFE,0xED ))// B3DE8A47-83EE-4266-A945-BEDF507AFEED
}

public enum __ABI_Windows_Media_Audio {
    public class IAudioDeviceInputNode: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode }

        internal func get_DeviceImpl() throws -> UWP.DeviceInformation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceInputNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IAudioDeviceOutputNode: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode }

        internal func get_DeviceImpl() throws -> UWP.DeviceInformation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioDeviceOutputNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IAudioFileInputNode: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode }

        internal func put_PlaybackSpeedFactorImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaybackSpeedFactor(pThis, value))
            }
        }

        internal func get_PlaybackSpeedFactorImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaybackSpeedFactor(pThis, &value))
            }
            return value
        }

        internal func get_PositionImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func SeekImpl(_ position: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Seek(pThis, .from(swift: position)))
            }
        }

        internal func get_StartTimeImpl() throws -> WindowsFoundation.TimeSpan? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartTime(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper.unwrapFrom(abi: value)
        }

        internal func put_StartTimeImpl(_ value: WindowsFoundation.TimeSpan?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StartTime(pThis, _value))
            }
        }

        internal func get_EndTimeImpl() throws -> WindowsFoundation.TimeSpan? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EndTime(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper.unwrapFrom(abi: value)
        }

        internal func put_EndTimeImpl(_ value: WindowsFoundation.TimeSpan?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EndTime(pThis, _value))
            }
        }

        internal func get_LoopCountImpl() throws -> Int32? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LoopCount(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_intWrapper.unwrapFrom(abi: value)
        }

        internal func put_LoopCountImpl(_ value: Int32?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1_intWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LoopCount(pThis, _value))
            }
        }

        internal func get_DurationImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Duration(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_SourceFileImpl() throws -> UWP.StorageFile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceFile(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func add_FileCompletedImpl(_ handler: TypedEventHandler<UWP.AudioFileInputNode?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFileInputNode_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_FileCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_FileCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFileInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FileCompleted(pThis, token))
            }
        }

    }

    public class IAudioFileOutputNode: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode }

        internal func get_FileImpl() throws -> UWP.AnyIStorageFile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_File(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Storage.IStorageFileWrapper.unwrapFrom(abi: value)
        }

        internal func get_FileEncodingProfileImpl() throws -> UWP.MediaEncodingProfile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileEncodingProfile(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func FinalizeAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.TranscodeFailureReason>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFileOutputNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FinalizeAsync(pThis, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CTranscoding__CTranscodeFailureReasonWrapper.unwrapFrom(abi: result)
        }

    }

    public class IAudioFrameCompletedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs }

        internal func get_FrameImpl() throws -> UWP.AudioFrame? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameCompletedEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Frame(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IAudioFrameInputNode: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode }

        internal func put_PlaybackSpeedFactorImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaybackSpeedFactor(pThis, value))
            }
        }

        internal func get_PlaybackSpeedFactorImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaybackSpeedFactor(pThis, &value))
            }
            return value
        }

        internal func AddFrameImpl(_ frame: UWP.AudioFrame?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddFrame(pThis, RawPointer(frame)))
            }
        }

        internal func DiscardQueuedFramesImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DiscardQueuedFrames(pThis))
            }
        }

        internal func get_QueuedSampleCountImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_QueuedSampleCount(pThis, &value))
            }
            return value
        }

        internal func add_AudioFrameCompletedImpl(_ handler: TypedEventHandler<UWP.AudioFrameInputNode?, UWP.AudioFrameCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CAudioFrameCompletedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AudioFrameCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_AudioFrameCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AudioFrameCompleted(pThis, token))
            }
        }

        internal func add_QuantumStartedImpl(_ handler: TypedEventHandler<UWP.AudioFrameInputNode?, UWP.FrameInputNodeQuantumStartedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioFrameInputNode___x_ABI_CWindows__CMedia__CAudio__CFrameInputNodeQuantumStartedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_QuantumStarted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_QuantumStartedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_QuantumStarted(pThis, token))
            }
        }

    }

    public class IAudioFrameOutputNode: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode }

        internal func GetFrameImpl() throws -> UWP.AudioFrame? {
            let (audioFrame) = try ComPtrs.initialize { audioFrameAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioFrameOutputNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFrame(pThis, &audioFrameAbi))
                }
            }
            return .from(abi: audioFrame)
        }

    }

    public class IAudioGraph: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraph }

        internal func CreateFrameInputNodeImpl() throws -> UWP.AudioFrameInputNode? {
            let (frameInputNode) = try ComPtrs.initialize { frameInputNodeAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFrameInputNode(pThis, &frameInputNodeAbi))
                }
            }
            return .from(abi: frameInputNode)
        }

        internal func CreateFrameInputNodeWithFormatImpl(_ encodingProperties: UWP.AudioEncodingProperties?) throws -> UWP.AudioFrameInputNode? {
            let (frameInputNode) = try ComPtrs.initialize { frameInputNodeAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFrameInputNodeWithFormat(pThis, RawPointer(encodingProperties), &frameInputNodeAbi))
                }
            }
            return .from(abi: frameInputNode)
        }

        internal func CreateDeviceInputNodeAsyncImpl(_ category: UWP.MediaCategory) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.CreateAudioDeviceInputNodeResult?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDeviceInputNodeAsync(pThis, category, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResultWrapper.unwrapFrom(abi: result)
        }

        internal func CreateDeviceInputNodeWithFormatAsyncImpl(_ category: UWP.MediaCategory, _ encodingProperties: UWP.AudioEncodingProperties?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.CreateAudioDeviceInputNodeResult?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDeviceInputNodeWithFormatAsync(pThis, category, RawPointer(encodingProperties), &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResultWrapper.unwrapFrom(abi: result)
        }

        internal func CreateDeviceInputNodeWithFormatOnDeviceAsyncImpl(_ category: UWP.MediaCategory, _ encodingProperties: UWP.AudioEncodingProperties?, _ device: UWP.DeviceInformation?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.CreateAudioDeviceInputNodeResult?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDeviceInputNodeWithFormatOnDeviceAsync(pThis, category, RawPointer(encodingProperties), RawPointer(device), &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResultWrapper.unwrapFrom(abi: result)
        }

        internal func CreateFrameOutputNodeImpl() throws -> UWP.AudioFrameOutputNode? {
            let (frameOutputNode) = try ComPtrs.initialize { frameOutputNodeAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFrameOutputNode(pThis, &frameOutputNodeAbi))
                }
            }
            return .from(abi: frameOutputNode)
        }

        internal func CreateFrameOutputNodeWithFormatImpl(_ encodingProperties: UWP.AudioEncodingProperties?) throws -> UWP.AudioFrameOutputNode? {
            let (frameOutputNode) = try ComPtrs.initialize { frameOutputNodeAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFrameOutputNodeWithFormat(pThis, RawPointer(encodingProperties), &frameOutputNodeAbi))
                }
            }
            return .from(abi: frameOutputNode)
        }

        internal func CreateDeviceOutputNodeAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.CreateAudioDeviceOutputNodeResult?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDeviceOutputNodeAsync(pThis, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceOutputNodeResultWrapper.unwrapFrom(abi: result)
        }

        internal func CreateFileInputNodeAsyncImpl(_ file: UWP.AnyIStorageFile?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.CreateAudioFileInputNodeResult?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let fileWrapper = __ABI_Windows_Storage.IStorageFileWrapper(file)
                let _file = try! fileWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFileInputNodeAsync(pThis, _file, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResultWrapper.unwrapFrom(abi: result)
        }

        internal func CreateFileOutputNodeAsyncImpl(_ file: UWP.AnyIStorageFile?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.CreateAudioFileOutputNodeResult?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let fileWrapper = __ABI_Windows_Storage.IStorageFileWrapper(file)
                let _file = try! fileWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFileOutputNodeAsync(pThis, _file, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResultWrapper.unwrapFrom(abi: result)
        }

        internal func CreateFileOutputNodeWithFileProfileAsyncImpl(_ file: UWP.AnyIStorageFile?, _ fileEncodingProfile: UWP.MediaEncodingProfile?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.CreateAudioFileOutputNodeResult?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let fileWrapper = __ABI_Windows_Storage.IStorageFileWrapper(file)
                let _file = try! fileWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFileOutputNodeWithFileProfileAsync(pThis, _file, RawPointer(fileEncodingProfile), &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileOutputNodeResultWrapper.unwrapFrom(abi: result)
        }

        internal func CreateSubmixNodeImpl() throws -> UWP.AudioSubmixNode? {
            let (submixNode) = try ComPtrs.initialize { submixNodeAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSubmixNode(pThis, &submixNodeAbi))
                }
            }
            return .from(abi: submixNode)
        }

        internal func CreateSubmixNodeWithFormatImpl(_ encodingProperties: UWP.AudioEncodingProperties?) throws -> UWP.AudioSubmixNode? {
            let (submixNode) = try ComPtrs.initialize { submixNodeAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSubmixNodeWithFormat(pThis, RawPointer(encodingProperties), &submixNodeAbi))
                }
            }
            return .from(abi: submixNode)
        }

        internal func StartImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis))
            }
        }

        internal func StopImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
            }
        }

        internal func ResetAllNodesImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResetAllNodes(pThis))
            }
        }

        internal func add_QuantumStartedImpl(_ handler: TypedEventHandler<UWP.AudioGraph?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_QuantumStarted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_QuantumStartedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_QuantumStarted(pThis, token))
            }
        }

        internal func add_QuantumProcessedImpl(_ handler: TypedEventHandler<UWP.AudioGraph?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_QuantumProcessed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_QuantumProcessedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_QuantumProcessed(pThis, token))
            }
        }

        internal func add_UnrecoverableErrorOccurredImpl(_ handler: TypedEventHandler<UWP.AudioGraph?, UWP.AudioGraphUnrecoverableErrorOccurredEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioGraph___x_ABI_CWindows__CMedia__CAudio__CAudioGraphUnrecoverableErrorOccurredEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_UnrecoverableErrorOccurred(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_UnrecoverableErrorOccurredImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_UnrecoverableErrorOccurred(pThis, token))
            }
        }

        internal func get_CompletedQuantumCountImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompletedQuantumCount(pThis, &value))
            }
            return value
        }

        internal func get_EncodingPropertiesImpl() throws -> UWP.AudioEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EncodingProperties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_LatencyInSamplesImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LatencyInSamples(pThis, &value))
            }
            return value
        }

        internal func get_PrimaryRenderDeviceImpl() throws -> UWP.DeviceInformation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryRenderDevice(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_RenderDeviceAudioProcessingImpl() throws -> UWP.AudioProcessing {
            var value: __x_ABI_CWindows_CMedia_CAudioProcessing = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RenderDeviceAudioProcessing(pThis, &value))
            }
            return value
        }

        internal func get_SamplesPerQuantumImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SamplesPerQuantum(pThis, &value))
            }
            return value
        }

    }

    public class IAudioGraph2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2 }

        internal func CreateFrameInputNodeWithFormatAndEmitterImpl(_ encodingProperties: UWP.AudioEncodingProperties?, _ emitter: UWP.AudioNodeEmitter?) throws -> UWP.AudioFrameInputNode? {
            let (frameInputNode) = try ComPtrs.initialize { frameInputNodeAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFrameInputNodeWithFormatAndEmitter(pThis, RawPointer(encodingProperties), RawPointer(emitter), &frameInputNodeAbi))
                }
            }
            return .from(abi: frameInputNode)
        }

        internal func CreateDeviceInputNodeWithFormatAndEmitterOnDeviceAsyncImpl(_ category: UWP.MediaCategory, _ encodingProperties: UWP.AudioEncodingProperties?, _ device: UWP.DeviceInformation?, _ emitter: UWP.AudioNodeEmitter?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.CreateAudioDeviceInputNodeResult?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDeviceInputNodeWithFormatAndEmitterOnDeviceAsync(pThis, category, RawPointer(encodingProperties), RawPointer(device), RawPointer(emitter), &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioDeviceInputNodeResultWrapper.unwrapFrom(abi: result)
        }

        internal func CreateFileInputNodeWithEmitterAsyncImpl(_ file: UWP.AnyIStorageFile?, _ emitter: UWP.AudioNodeEmitter?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.CreateAudioFileInputNodeResult?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let fileWrapper = __ABI_Windows_Storage.IStorageFileWrapper(file)
                let _file = try! fileWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFileInputNodeWithEmitterAsync(pThis, _file, RawPointer(emitter), &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioFileInputNodeResultWrapper.unwrapFrom(abi: result)
        }

        internal func CreateSubmixNodeWithFormatAndEmitterImpl(_ encodingProperties: UWP.AudioEncodingProperties?, _ emitter: UWP.AudioNodeEmitter?) throws -> UWP.AudioSubmixNode? {
            let (submixNode) = try ComPtrs.initialize { submixNodeAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSubmixNodeWithFormatAndEmitter(pThis, RawPointer(encodingProperties), RawPointer(emitter), &submixNodeAbi))
                }
            }
            return .from(abi: submixNode)
        }

        internal func CreateBatchUpdaterImpl() throws -> UWP.AudioGraphBatchUpdater? {
            let (updater) = try ComPtrs.initialize { updaterAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateBatchUpdater(pThis, &updaterAbi))
                }
            }
            return .from(abi: updater)
        }

    }

    public class IAudioGraph3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3 }

        internal func CreateMediaSourceAudioInputNodeAsyncImpl(_ mediaSource: UWP.MediaSource?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.CreateMediaSourceAudioInputNodeResult?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateMediaSourceAudioInputNodeAsync(pThis, RawPointer(mediaSource), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResultWrapper.unwrapFrom(abi: operation)
        }

        internal func CreateMediaSourceAudioInputNodeWithEmitterAsyncImpl(_ mediaSource: UWP.MediaSource?, _ emitter: UWP.AudioNodeEmitter?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.CreateMediaSourceAudioInputNodeResult?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraph3.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateMediaSourceAudioInputNodeWithEmitterAsync(pThis, RawPointer(mediaSource), RawPointer(emitter), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateMediaSourceAudioInputNodeResultWrapper.unwrapFrom(abi: operation)
        }

    }

    public class IAudioGraphConnection: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection }

        internal func get_DestinationImpl() throws -> UWP.AnyIAudioNode? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Destination(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Media_Audio.IAudioNodeWrapper.unwrapFrom(abi: value)
        }

        internal func put_GainImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Gain(pThis, value))
            }
        }

        internal func get_GainImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphConnection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Gain(pThis, &value))
            }
            return value
        }

    }

    public class IAudioGraphSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings }

        internal func get_EncodingPropertiesImpl() throws -> UWP.AudioEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EncodingProperties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_EncodingPropertiesImpl(_ value: UWP.AudioEncodingProperties?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EncodingProperties(pThis, RawPointer(value)))
            }
        }

        internal func get_PrimaryRenderDeviceImpl() throws -> UWP.DeviceInformation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryRenderDevice(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_PrimaryRenderDeviceImpl(_ value: UWP.DeviceInformation?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PrimaryRenderDevice(pThis, RawPointer(value)))
            }
        }

        internal func get_QuantumSizeSelectionModeImpl() throws -> UWP.QuantumSizeSelectionMode {
            var value: __x_ABI_CWindows_CMedia_CAudio_CQuantumSizeSelectionMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_QuantumSizeSelectionMode(pThis, &value))
            }
            return value
        }

        internal func put_QuantumSizeSelectionModeImpl(_ value: UWP.QuantumSizeSelectionMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_QuantumSizeSelectionMode(pThis, value))
            }
        }

        internal func get_DesiredSamplesPerQuantumImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredSamplesPerQuantum(pThis, &value))
            }
            return value
        }

        internal func put_DesiredSamplesPerQuantumImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredSamplesPerQuantum(pThis, value))
            }
        }

        internal func get_AudioRenderCategoryImpl() throws -> UWP.AudioRenderCategory {
            var value: __x_ABI_CWindows_CMedia_CRender_CAudioRenderCategory = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AudioRenderCategory(pThis, &value))
            }
            return value
        }

        internal func put_AudioRenderCategoryImpl(_ value: UWP.AudioRenderCategory) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AudioRenderCategory(pThis, value))
            }
        }

        internal func get_DesiredRenderDeviceAudioProcessingImpl() throws -> UWP.AudioProcessing {
            var value: __x_ABI_CWindows_CMedia_CAudioProcessing = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredRenderDeviceAudioProcessing(pThis, &value))
            }
            return value
        }

        internal func put_DesiredRenderDeviceAudioProcessingImpl(_ value: UWP.AudioProcessing) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredRenderDeviceAudioProcessing(pThis, value))
            }
        }

    }

    public class IAudioGraphSettings2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2 }

        internal func put_MaxPlaybackSpeedFactorImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxPlaybackSpeedFactor(pThis, value))
            }
        }

        internal func get_MaxPlaybackSpeedFactorImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettings2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxPlaybackSpeedFactor(pThis, &value))
            }
            return value
        }

    }

    public class IAudioGraphSettingsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory }

        internal func CreateImpl(_ audioRenderCategory: UWP.AudioRenderCategory) throws -> IAudioGraphSettings {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphSettingsFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, audioRenderCategory, &valueAbi))
                }
            }
            return IAudioGraphSettings(value!)
        }

    }

    public class IAudioGraphStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics }

        internal func CreateAsyncImpl(_ settings: UWP.AudioGraphSettings?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.CreateAudioGraphResult?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAsync(pThis, RawPointer(settings), &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CCreateAudioGraphResultWrapper.unwrapFrom(abi: result)
        }

    }

    public class IAudioGraphUnrecoverableErrorOccurredEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs }

        internal func get_ErrorImpl() throws -> UWP.AudioGraphUnrecoverableError {
            var value: __x_ABI_CWindows_CMedia_CAudio_CAudioGraphUnrecoverableError = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioGraphUnrecoverableErrorOccurredEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Error(pThis, &value))
            }
            return value
        }

    }

    public class IAudioInputNode: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode }

        open func get_OutgoingConnectionsImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.AudioGraphConnection?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutgoingConnections(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnectionWrapper.unwrapFrom(abi: value)
        }

        open func AddOutgoingConnectionImpl(_ destination: UWP.AnyIAudioNode?) throws {
            let destinationWrapper = __ABI_Windows_Media_Audio.IAudioNodeWrapper(destination)
            let _destination = try! destinationWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddOutgoingConnection(pThis, _destination))
            }
        }

        open func AddOutgoingConnectionWithGainImpl(_ destination: UWP.AnyIAudioNode?, _ gain: Double) throws {
            let destinationWrapper = __ABI_Windows_Media_Audio.IAudioNodeWrapper(destination)
            let _destination = try! destinationWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddOutgoingConnectionWithGain(pThis, _destination, gain))
            }
        }

        open func RemoveOutgoingConnectionImpl(_ destination: UWP.AnyIAudioNode?) throws {
            let destinationWrapper = __ABI_Windows_Media_Audio.IAudioNodeWrapper(destination)
            let _destination = try! destinationWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveOutgoingConnection(pThis, _destination))
            }
        }

    }

    internal static var IAudioInputNodeVTable: __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNodeVtbl = .init(
        QueryInterface: { IAudioInputNodeWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAudioInputNodeWrapper.addRef($0) },
        Release: { IAudioInputNodeWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Media_Audio.IAudioInputNodeWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IClosableWrapper.IID
            iids[4] = __ABI_Windows_Media_Audio.IAudioNodeWrapper.IID
            $1!.pointee = 5
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Media.Audio.IAudioInputNode").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_OutgoingConnections: {
            guard let __unwrapped__instance = IAudioInputNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.outgoingConnections
            let valueWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CAudioGraphConnectionWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        AddOutgoingConnection: {
            do {
                guard let __unwrapped__instance = IAudioInputNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let destination: UWP.AnyIAudioNode? = __ABI_Windows_Media_Audio.IAudioNodeWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.addOutgoingConnection(destination)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        AddOutgoingConnectionWithGain: {
            do {
                guard let __unwrapped__instance = IAudioInputNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let destination: UWP.AnyIAudioNode? = __ABI_Windows_Media_Audio.IAudioNodeWrapper.unwrapFrom(abi: ComPtr($1))
                let gain: Double = $2
                try __unwrapped__instance.addOutgoingConnection(destination, gain)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        RemoveOutgoingConnection: {
            do {
                guard let __unwrapped__instance = IAudioInputNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let destination: UWP.AnyIAudioNode? = __ABI_Windows_Media_Audio.IAudioNodeWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.removeOutgoingConnection(destination)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IAudioInputNodeWrapper = InterfaceWrapperBase<__IMPL_Windows_Media_Audio.IAudioInputNodeBridge>
    public class IAudioInputNode2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2 }

        open func get_EmitterImpl() throws -> UWP.AudioNodeEmitter? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Emitter(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    internal static var IAudioInputNode2VTable: __x_ABI_CWindows_CMedia_CAudio_CIAudioInputNode2Vtbl = .init(
        QueryInterface: { IAudioInputNode2Wrapper.queryInterface($0, $1, $2) },
        AddRef: { IAudioInputNode2Wrapper.addRef($0) },
        Release: { IAudioInputNode2Wrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 6).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Media_Audio.IAudioInputNode2Wrapper.IID
            iids[3] = __ABI_Windows_Foundation.IClosableWrapper.IID
            iids[4] = __ABI_Windows_Media_Audio.IAudioNodeWrapper.IID
            iids[5] = __ABI_Windows_Media_Audio.IAudioInputNodeWrapper.IID
            $1!.pointee = 6
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Media.Audio.IAudioInputNode2").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Emitter: {
            guard let __unwrapped__instance = IAudioInputNode2Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.emitter
            value?.copyTo($1)
            return S_OK
        }
    )

    public typealias IAudioInputNode2Wrapper = InterfaceWrapperBase<__IMPL_Windows_Media_Audio.IAudioInputNode2Bridge>
    public class IAudioNode: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNode }

        open func get_EffectDefinitionsImpl() throws -> WindowsFoundation.AnyIVector<UWP.AnyIAudioEffectDefinition?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EffectDefinitions(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionWrapper.unwrapFrom(abi: value)
        }

        open func put_OutgoingGainImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OutgoingGain(pThis, value))
            }
        }

        open func get_OutgoingGainImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutgoingGain(pThis, &value))
            }
            return value
        }

        open func get_EncodingPropertiesImpl() throws -> UWP.AudioEncodingProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EncodingProperties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        open func get_ConsumeInputImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ConsumeInput(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_ConsumeInputImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ConsumeInput(pThis, .init(from: value)))
            }
        }

        open func StartImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis))
            }
        }

        open func StopImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
            }
        }

        open func ResetImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Reset(pThis))
            }
        }

        open func DisableEffectsByDefinitionImpl(_ definition: UWP.AnyIAudioEffectDefinition?) throws {
            let definitionWrapper = __ABI_Windows_Media_Effects.IAudioEffectDefinitionWrapper(definition)
            let _definition = try! definitionWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DisableEffectsByDefinition(pThis, _definition))
            }
        }

        open func EnableEffectsByDefinitionImpl(_ definition: UWP.AnyIAudioEffectDefinition?) throws {
            let definitionWrapper = __ABI_Windows_Media_Effects.IAudioEffectDefinitionWrapper(definition)
            let _definition = try! definitionWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.EnableEffectsByDefinition(pThis, _definition))
            }
        }

    }

    internal static var IAudioNodeVTable: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeVtbl = .init(
        QueryInterface: { IAudioNodeWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAudioNodeWrapper.addRef($0) },
        Release: { IAudioNodeWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Media_Audio.IAudioNodeWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IClosableWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Media.Audio.IAudioNode").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_EffectDefinitions: {
            guard let __unwrapped__instance = IAudioNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.effectDefinitions
            let valueWrapper = UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CMedia__CEffects__CIAudioEffectDefinitionWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        put_OutgoingGain: {
            guard let __unwrapped__instance = IAudioNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Double = $1
            __unwrapped__instance.outgoingGain = value
            return S_OK
        },

        get_OutgoingGain: {
            guard let __unwrapped__instance = IAudioNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.outgoingGain
            $1?.initialize(to: value)
            return S_OK
        },

        get_EncodingProperties: {
            guard let __unwrapped__instance = IAudioNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.encodingProperties
            value?.copyTo($1)
            return S_OK
        },

        get_ConsumeInput: {
            guard let __unwrapped__instance = IAudioNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.consumeInput
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        put_ConsumeInput: {
            guard let __unwrapped__instance = IAudioNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Bool = .init(from: $1)
            __unwrapped__instance.consumeInput = value
            return S_OK
        },

        Start: {
            do {
                guard let __unwrapped__instance = IAudioNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.start()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        Stop: {
            do {
                guard let __unwrapped__instance = IAudioNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.stop()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        Reset: {
            do {
                guard let __unwrapped__instance = IAudioNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.reset()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        DisableEffectsByDefinition: {
            do {
                guard let __unwrapped__instance = IAudioNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let definition: UWP.AnyIAudioEffectDefinition? = __ABI_Windows_Media_Effects.IAudioEffectDefinitionWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.disableEffectsByDefinition(definition)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        EnableEffectsByDefinition: {
            do {
                guard let __unwrapped__instance = IAudioNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let definition: UWP.AnyIAudioEffectDefinition? = __ABI_Windows_Media_Effects.IAudioEffectDefinitionWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.enableEffectsByDefinition(definition)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IAudioNodeWrapper = InterfaceWrapperBase<__IMPL_Windows_Media_Audio.IAudioNodeBridge>
    public class IAudioNodeEmitter: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter }

        internal func get_PositionImpl() throws -> WindowsFoundation.Vector3 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector3 = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PositionImpl(_ value: WindowsFoundation.Vector3) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Position(pThis, .from(swift: value)))
            }
        }

        internal func get_DirectionImpl() throws -> WindowsFoundation.Vector3 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector3 = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Direction(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_DirectionImpl(_ value: WindowsFoundation.Vector3) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Direction(pThis, .from(swift: value)))
            }
        }

        internal func get_ShapeImpl() throws -> UWP.AudioNodeEmitterShape? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Shape(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DecayModelImpl() throws -> UWP.AudioNodeEmitterDecayModel? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecayModel(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_GainImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Gain(pThis, &value))
            }
            return value
        }

        internal func put_GainImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Gain(pThis, value))
            }
        }

        internal func get_DistanceScaleImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DistanceScale(pThis, &value))
            }
            return value
        }

        internal func put_DistanceScaleImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DistanceScale(pThis, value))
            }
        }

        internal func get_DopplerScaleImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DopplerScale(pThis, &value))
            }
            return value
        }

        internal func put_DopplerScaleImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DopplerScale(pThis, value))
            }
        }

        internal func get_DopplerVelocityImpl() throws -> WindowsFoundation.Vector3 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector3 = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DopplerVelocity(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_DopplerVelocityImpl(_ value: WindowsFoundation.Vector3) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DopplerVelocity(pThis, .from(swift: value)))
            }
        }

        internal func get_IsDopplerDisabledImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDopplerDisabled(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IAudioNodeEmitter2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2 }

        internal func get_SpatialAudioModelImpl() throws -> UWP.SpatialAudioModel {
            var value: __x_ABI_CWindows_CMedia_CAudio_CSpatialAudioModel = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpatialAudioModel(pThis, &value))
            }
            return value
        }

        internal func put_SpatialAudioModelImpl(_ value: UWP.SpatialAudioModel) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitter2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SpatialAudioModel(pThis, value))
            }
        }

    }

    public class IAudioNodeEmitterConeProperties: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties }

        internal func get_InnerAngleImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InnerAngle(pThis, &value))
            }
            return value
        }

        internal func get_OuterAngleImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OuterAngle(pThis, &value))
            }
            return value
        }

        internal func get_OuterAngleGainImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterConeProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OuterAngleGain(pThis, &value))
            }
            return value
        }

    }

    public class IAudioNodeEmitterDecayModel: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel }

        internal func get_KindImpl() throws -> UWP.AudioNodeEmitterDecayKind {
            var value: __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterDecayKind = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, &value))
            }
            return value
        }

        internal func get_MinGainImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinGain(pThis, &value))
            }
            return value
        }

        internal func get_MaxGainImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxGain(pThis, &value))
            }
            return value
        }

        internal func get_NaturalPropertiesImpl() throws -> UWP.AudioNodeEmitterNaturalDecayModelProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModel.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NaturalProperties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IAudioNodeEmitterDecayModelStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics }

        internal func CreateNaturalImpl(_ minGain: Double, _ maxGain: Double, _ unityGainDistance: Double, _ cutoffDistance: Double) throws -> UWP.AudioNodeEmitterDecayModel? {
            let (decayModel) = try ComPtrs.initialize { decayModelAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateNatural(pThis, minGain, maxGain, unityGainDistance, cutoffDistance, &decayModelAbi))
                }
            }
            return .from(abi: decayModel)
        }

        internal func CreateCustomImpl(_ minGain: Double, _ maxGain: Double) throws -> UWP.AudioNodeEmitterDecayModel? {
            let (decayModel) = try ComPtrs.initialize { decayModelAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterDecayModelStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCustom(pThis, minGain, maxGain, &decayModelAbi))
                }
            }
            return .from(abi: decayModel)
        }

    }

    public class IAudioNodeEmitterFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory }

        internal func CreateAudioNodeEmitterImpl(_ shape: UWP.AudioNodeEmitterShape?, _ decayModel: UWP.AudioNodeEmitterDecayModel?, _ settings: UWP.AudioNodeEmitterSettings) throws -> IAudioNodeEmitter {
            let (emitter) = try ComPtrs.initialize { emitterAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAudioNodeEmitter(pThis, RawPointer(shape), RawPointer(decayModel), settings, &emitterAbi))
                }
            }
            return IAudioNodeEmitter(emitter!)
        }

    }

    public class IAudioNodeEmitterNaturalDecayModelProperties: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties }

        internal func get_UnityGainDistanceImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UnityGainDistance(pThis, &value))
            }
            return value
        }

        internal func get_CutoffDistanceImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterNaturalDecayModelProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CutoffDistance(pThis, &value))
            }
            return value
        }

    }

    public class IAudioNodeEmitterShape: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape }

        internal func get_KindImpl() throws -> UWP.AudioNodeEmitterShapeKind {
            var value: __x_ABI_CWindows_CMedia_CAudio_CAudioNodeEmitterShapeKind = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, &value))
            }
            return value
        }

        internal func get_ConePropertiesImpl() throws -> UWP.AudioNodeEmitterConeProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShape.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ConeProperties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IAudioNodeEmitterShapeStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics }

        internal func CreateConeImpl(_ innerAngle: Double, _ outerAngle: Double, _ outerAngleGain: Double) throws -> UWP.AudioNodeEmitterShape? {
            let (shape) = try ComPtrs.initialize { shapeAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCone(pThis, innerAngle, outerAngle, outerAngleGain, &shapeAbi))
                }
            }
            return .from(abi: shape)
        }

        internal func CreateOmnidirectionalImpl() throws -> UWP.AudioNodeEmitterShape? {
            let (shape) = try ComPtrs.initialize { shapeAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeEmitterShapeStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateOmnidirectional(pThis, &shapeAbi))
                }
            }
            return .from(abi: shape)
        }

    }

    public class IAudioNodeListener: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener }

        internal func get_PositionImpl() throws -> WindowsFoundation.Vector3 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector3 = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_PositionImpl(_ value: WindowsFoundation.Vector3) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Position(pThis, .from(swift: value)))
            }
        }

        internal func get_OrientationImpl() throws -> WindowsFoundation.Quaternion {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CQuaternion = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Orientation(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_OrientationImpl(_ value: WindowsFoundation.Quaternion) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Orientation(pThis, .from(swift: value)))
            }
        }

        internal func get_SpeedOfSoundImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpeedOfSound(pThis, &value))
            }
            return value
        }

        internal func put_SpeedOfSoundImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SpeedOfSound(pThis, value))
            }
        }

        internal func get_DopplerVelocityImpl() throws -> WindowsFoundation.Vector3 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector3 = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DopplerVelocity(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_DopplerVelocityImpl(_ value: WindowsFoundation.Vector3) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeListener.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DopplerVelocity(pThis, .from(swift: value)))
            }
        }

    }

    public class IAudioNodeWithListener: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener }

        open func put_ListenerImpl(_ value: UWP.AudioNodeListener?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Listener(pThis, RawPointer(value)))
            }
        }

        open func get_ListenerImpl() throws -> UWP.AudioNodeListener? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListener.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Listener(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    internal static var IAudioNodeWithListenerVTable: __x_ABI_CWindows_CMedia_CAudio_CIAudioNodeWithListenerVtbl = .init(
        QueryInterface: { IAudioNodeWithListenerWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAudioNodeWithListenerWrapper.addRef($0) },
        Release: { IAudioNodeWithListenerWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Media_Audio.IAudioNodeWithListenerWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IClosableWrapper.IID
            iids[4] = __ABI_Windows_Media_Audio.IAudioNodeWrapper.IID
            $1!.pointee = 5
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Media.Audio.IAudioNodeWithListener").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        put_Listener: {
            guard let __unwrapped__instance = IAudioNodeWithListenerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.AudioNodeListener? = .from(abi: ComPtr($1))
            __unwrapped__instance.listener = value
            return S_OK
        },

        get_Listener: {
            guard let __unwrapped__instance = IAudioNodeWithListenerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.listener
            value?.copyTo($1)
            return S_OK
        }
    )

    public typealias IAudioNodeWithListenerWrapper = InterfaceWrapperBase<__IMPL_Windows_Media_Audio.IAudioNodeWithListenerBridge>
    public class IAudioStateMonitor: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor }

        internal func add_SoundLevelChangedImpl(_ handler: TypedEventHandler<UWP.AudioStateMonitor?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CAudioStateMonitor_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SoundLevelChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_SoundLevelChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SoundLevelChanged(pThis, token))
            }
        }

        internal func get_SoundLevelImpl() throws -> UWP.SoundLevel {
            var value: __x_ABI_CWindows_CMedia_CSoundLevel = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SoundLevel(pThis, &value))
            }
            return value
        }

    }

    public class IAudioStateMonitorStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics }

        internal func CreateForRenderMonitoringImpl() throws -> UWP.AudioStateMonitor? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForRenderMonitoring(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateForRenderMonitoringWithCategoryImpl(_ category: UWP.AudioRenderCategory) throws -> UWP.AudioStateMonitor? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForRenderMonitoringWithCategory(pThis, category, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateForRenderMonitoringWithCategoryAndDeviceRoleImpl(_ category: UWP.AudioRenderCategory, _ role: UWP.AudioDeviceRole) throws -> UWP.AudioStateMonitor? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForRenderMonitoringWithCategoryAndDeviceRole(pThis, category, role, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateForRenderMonitoringWithCategoryAndDeviceIdImpl(_ category: UWP.AudioRenderCategory, _ deviceId: String) throws -> UWP.AudioStateMonitor? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _deviceId = try! HString(deviceId)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForRenderMonitoringWithCategoryAndDeviceId(pThis, category, _deviceId.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateForCaptureMonitoringImpl() throws -> UWP.AudioStateMonitor? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForCaptureMonitoring(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateForCaptureMonitoringWithCategoryImpl(_ category: UWP.MediaCategory) throws -> UWP.AudioStateMonitor? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForCaptureMonitoringWithCategory(pThis, category, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateForCaptureMonitoringWithCategoryAndDeviceRoleImpl(_ category: UWP.MediaCategory, _ role: UWP.AudioDeviceRole) throws -> UWP.AudioStateMonitor? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForCaptureMonitoringWithCategoryAndDeviceRole(pThis, category, role, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateForCaptureMonitoringWithCategoryAndDeviceIdImpl(_ category: UWP.MediaCategory, _ deviceId: String) throws -> UWP.AudioStateMonitor? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _deviceId = try! HString(deviceId)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitorStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForCaptureMonitoringWithCategoryAndDeviceId(pThis, category, _deviceId.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ICreateAudioDeviceInputNodeResult: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult }

        internal func get_StatusImpl() throws -> UWP.AudioDeviceNodeCreationStatus {
            var value: __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &value))
            }
            return value
        }

        internal func get_DeviceInputNodeImpl() throws -> UWP.AudioDeviceInputNode? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceInputNode(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICreateAudioDeviceInputNodeResult2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2 }

        internal func get_ExtendedErrorImpl() throws -> HRESULT {
            var value: HRESULT = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceInputNodeResult2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendedError(pThis, &value))
            }
            return value
        }

    }

    public class ICreateAudioDeviceOutputNodeResult: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult }

        internal func get_StatusImpl() throws -> UWP.AudioDeviceNodeCreationStatus {
            var value: __x_ABI_CWindows_CMedia_CAudio_CAudioDeviceNodeCreationStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &value))
            }
            return value
        }

        internal func get_DeviceOutputNodeImpl() throws -> UWP.AudioDeviceOutputNode? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceOutputNode(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICreateAudioDeviceOutputNodeResult2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2 }

        internal func get_ExtendedErrorImpl() throws -> HRESULT {
            var value: HRESULT = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateAudioDeviceOutputNodeResult2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendedError(pThis, &value))
            }
            return value
        }

    }

    public class ICreateAudioFileInputNodeResult: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult }

        internal func get_StatusImpl() throws -> UWP.AudioFileNodeCreationStatus {
            var value: __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &value))
            }
            return value
        }

        internal func get_FileInputNodeImpl() throws -> UWP.AudioFileInputNode? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileInputNode(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICreateAudioFileInputNodeResult2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2 }

        internal func get_ExtendedErrorImpl() throws -> HRESULT {
            var value: HRESULT = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileInputNodeResult2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendedError(pThis, &value))
            }
            return value
        }

    }

    public class ICreateAudioFileOutputNodeResult: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult }

        internal func get_StatusImpl() throws -> UWP.AudioFileNodeCreationStatus {
            var value: __x_ABI_CWindows_CMedia_CAudio_CAudioFileNodeCreationStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &value))
            }
            return value
        }

        internal func get_FileOutputNodeImpl() throws -> UWP.AudioFileOutputNode? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileOutputNode(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICreateAudioFileOutputNodeResult2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2 }

        internal func get_ExtendedErrorImpl() throws -> HRESULT {
            var value: HRESULT = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateAudioFileOutputNodeResult2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendedError(pThis, &value))
            }
            return value
        }

    }

    public class ICreateAudioGraphResult: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult }

        internal func get_StatusImpl() throws -> UWP.AudioGraphCreationStatus {
            var value: __x_ABI_CWindows_CMedia_CAudio_CAudioGraphCreationStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &value))
            }
            return value
        }

        internal func get_GraphImpl() throws -> UWP.AudioGraph? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Graph(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICreateAudioGraphResult2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2 }

        internal func get_ExtendedErrorImpl() throws -> HRESULT {
            var value: HRESULT = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateAudioGraphResult2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendedError(pThis, &value))
            }
            return value
        }

    }

    public class ICreateMediaSourceAudioInputNodeResult: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult }

        internal func get_StatusImpl() throws -> UWP.MediaSourceAudioInputNodeCreationStatus {
            var value: __x_ABI_CWindows_CMedia_CAudio_CMediaSourceAudioInputNodeCreationStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &value))
            }
            return value
        }

        internal func get_NodeImpl() throws -> UWP.MediaSourceAudioInputNode? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Node(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICreateMediaSourceAudioInputNodeResult2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2 }

        internal func get_ExtendedErrorImpl() throws -> HRESULT {
            var value: HRESULT = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CICreateMediaSourceAudioInputNodeResult2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendedError(pThis, &value))
            }
            return value
        }

    }

    public class IEchoEffectDefinition: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition }

        internal func put_WetDryMixImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_WetDryMix(pThis, value))
            }
        }

        internal func get_WetDryMixImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WetDryMix(pThis, &value))
            }
            return value
        }

        internal func put_FeedbackImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Feedback(pThis, value))
            }
        }

        internal func get_FeedbackImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Feedback(pThis, &value))
            }
            return value
        }

        internal func put_DelayImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Delay(pThis, value))
            }
        }

        internal func get_DelayImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Delay(pThis, &value))
            }
            return value
        }

    }

    public class IEchoEffectDefinitionFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory }

        internal func CreateImpl(_ audioGraph: UWP.AudioGraph?) throws -> IEchoEffectDefinition {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIEchoEffectDefinitionFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, RawPointer(audioGraph), &valueAbi))
                }
            }
            return IEchoEffectDefinition(value!)
        }

    }

    public class IEqualizerBand: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand }

        internal func get_BandwidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bandwidth(pThis, &value))
            }
            return value
        }

        internal func put_BandwidthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Bandwidth(pThis, value))
            }
        }

        internal func get_FrequencyCenterImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FrequencyCenter(pThis, &value))
            }
            return value
        }

        internal func put_FrequencyCenterImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FrequencyCenter(pThis, value))
            }
        }

        internal func get_GainImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Gain(pThis, &value))
            }
            return value
        }

        internal func put_GainImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIEqualizerBand.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Gain(pThis, value))
            }
        }

    }

    public class IEqualizerEffectDefinition: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition }

        internal func get_BandsImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.EqualizerBand?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinition.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bands(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CAudio__CEqualizerBandWrapper.unwrapFrom(abi: value)
        }

    }

    public class IEqualizerEffectDefinitionFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory }

        internal func CreateImpl(_ audioGraph: UWP.AudioGraph?) throws -> IEqualizerEffectDefinition {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIEqualizerEffectDefinitionFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, RawPointer(audioGraph), &valueAbi))
                }
            }
            return IEqualizerEffectDefinition(value!)
        }

    }

    public class IFrameInputNodeQuantumStartedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs }

        internal func get_RequiredSamplesImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIFrameInputNodeQuantumStartedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequiredSamples(pThis, &value))
            }
            return value
        }

    }

    public class ILimiterEffectDefinition: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition }

        internal func put_ReleaseImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Release(pThis, value))
            }
        }

        internal func get_ReleaseImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Release(pThis, &value))
            }
            return value
        }

        internal func put_LoudnessImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Loudness(pThis, value))
            }
        }

        internal func get_LoudnessImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Loudness(pThis, &value))
            }
            return value
        }

    }

    public class ILimiterEffectDefinitionFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory }

        internal func CreateImpl(_ audioGraph: UWP.AudioGraph?) throws -> ILimiterEffectDefinition {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CILimiterEffectDefinitionFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, RawPointer(audioGraph), &valueAbi))
                }
            }
            return ILimiterEffectDefinition(value!)
        }

    }

    public class IMediaSourceAudioInputNode: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode }

        internal func put_PlaybackSpeedFactorImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaybackSpeedFactor(pThis, value))
            }
        }

        internal func get_PlaybackSpeedFactorImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaybackSpeedFactor(pThis, &value))
            }
            return value
        }

        internal func get_PositionImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func SeekImpl(_ position: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Seek(pThis, .from(swift: position)))
            }
        }

        internal func get_StartTimeImpl() throws -> WindowsFoundation.TimeSpan? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartTime(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper.unwrapFrom(abi: value)
        }

        internal func put_StartTimeImpl(_ value: WindowsFoundation.TimeSpan?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StartTime(pThis, _value))
            }
        }

        internal func get_EndTimeImpl() throws -> WindowsFoundation.TimeSpan? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EndTime(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper.unwrapFrom(abi: value)
        }

        internal func put_EndTimeImpl(_ value: WindowsFoundation.TimeSpan?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EndTime(pThis, _value))
            }
        }

        internal func get_LoopCountImpl() throws -> Int32? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LoopCount(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_intWrapper.unwrapFrom(abi: value)
        }

        internal func put_LoopCountImpl(_ value: Int32?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1_intWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LoopCount(pThis, _value))
            }
        }

        internal func get_DurationImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Duration(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_MediaSourceImpl() throws -> UWP.MediaSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaSource(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func add_MediaSourceCompletedImpl(_ handler: TypedEventHandler<UWP.MediaSourceAudioInputNode?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CMediaSourceAudioInputNode_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_MediaSourceCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_MediaSourceCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIMediaSourceAudioInputNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_MediaSourceCompleted(pThis, token))
            }
        }

    }

    public class IReverbEffectDefinition: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition }

        internal func put_WetDryMixImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_WetDryMix(pThis, value))
            }
        }

        internal func get_WetDryMixImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WetDryMix(pThis, &value))
            }
            return value
        }

        internal func put_ReflectionsDelayImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ReflectionsDelay(pThis, value))
            }
        }

        internal func get_ReflectionsDelayImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReflectionsDelay(pThis, &value))
            }
            return value
        }

        internal func put_ReverbDelayImpl(_ value: UInt8) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ReverbDelay(pThis, value))
            }
        }

        internal func get_ReverbDelayImpl() throws -> UInt8 {
            var value: UINT8 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReverbDelay(pThis, &value))
            }
            return value
        }

        internal func put_RearDelayImpl(_ value: UInt8) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RearDelay(pThis, value))
            }
        }

        internal func get_RearDelayImpl() throws -> UInt8 {
            var value: UINT8 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RearDelay(pThis, &value))
            }
            return value
        }

        internal func put_PositionLeftImpl(_ value: UInt8) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PositionLeft(pThis, value))
            }
        }

        internal func get_PositionLeftImpl() throws -> UInt8 {
            var value: UINT8 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PositionLeft(pThis, &value))
            }
            return value
        }

        internal func put_PositionRightImpl(_ value: UInt8) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PositionRight(pThis, value))
            }
        }

        internal func get_PositionRightImpl() throws -> UInt8 {
            var value: UINT8 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PositionRight(pThis, &value))
            }
            return value
        }

        internal func put_PositionMatrixLeftImpl(_ value: UInt8) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PositionMatrixLeft(pThis, value))
            }
        }

        internal func get_PositionMatrixLeftImpl() throws -> UInt8 {
            var value: UINT8 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PositionMatrixLeft(pThis, &value))
            }
            return value
        }

        internal func put_PositionMatrixRightImpl(_ value: UInt8) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PositionMatrixRight(pThis, value))
            }
        }

        internal func get_PositionMatrixRightImpl() throws -> UInt8 {
            var value: UINT8 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PositionMatrixRight(pThis, &value))
            }
            return value
        }

        internal func put_EarlyDiffusionImpl(_ value: UInt8) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EarlyDiffusion(pThis, value))
            }
        }

        internal func get_EarlyDiffusionImpl() throws -> UInt8 {
            var value: UINT8 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EarlyDiffusion(pThis, &value))
            }
            return value
        }

        internal func put_LateDiffusionImpl(_ value: UInt8) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LateDiffusion(pThis, value))
            }
        }

        internal func get_LateDiffusionImpl() throws -> UInt8 {
            var value: UINT8 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LateDiffusion(pThis, &value))
            }
            return value
        }

        internal func put_LowEQGainImpl(_ value: UInt8) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LowEQGain(pThis, value))
            }
        }

        internal func get_LowEQGainImpl() throws -> UInt8 {
            var value: UINT8 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LowEQGain(pThis, &value))
            }
            return value
        }

        internal func put_LowEQCutoffImpl(_ value: UInt8) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LowEQCutoff(pThis, value))
            }
        }

        internal func get_LowEQCutoffImpl() throws -> UInt8 {
            var value: UINT8 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LowEQCutoff(pThis, &value))
            }
            return value
        }

        internal func put_HighEQGainImpl(_ value: UInt8) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HighEQGain(pThis, value))
            }
        }

        internal func get_HighEQGainImpl() throws -> UInt8 {
            var value: UINT8 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HighEQGain(pThis, &value))
            }
            return value
        }

        internal func put_HighEQCutoffImpl(_ value: UInt8) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HighEQCutoff(pThis, value))
            }
        }

        internal func get_HighEQCutoffImpl() throws -> UInt8 {
            var value: UINT8 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HighEQCutoff(pThis, &value))
            }
            return value
        }

        internal func put_RoomFilterFreqImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RoomFilterFreq(pThis, value))
            }
        }

        internal func get_RoomFilterFreqImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RoomFilterFreq(pThis, &value))
            }
            return value
        }

        internal func put_RoomFilterMainImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RoomFilterMain(pThis, value))
            }
        }

        internal func get_RoomFilterMainImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RoomFilterMain(pThis, &value))
            }
            return value
        }

        internal func put_RoomFilterHFImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RoomFilterHF(pThis, value))
            }
        }

        internal func get_RoomFilterHFImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RoomFilterHF(pThis, &value))
            }
            return value
        }

        internal func put_ReflectionsGainImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ReflectionsGain(pThis, value))
            }
        }

        internal func get_ReflectionsGainImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReflectionsGain(pThis, &value))
            }
            return value
        }

        internal func put_ReverbGainImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ReverbGain(pThis, value))
            }
        }

        internal func get_ReverbGainImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReverbGain(pThis, &value))
            }
            return value
        }

        internal func put_DecayTimeImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DecayTime(pThis, value))
            }
        }

        internal func get_DecayTimeImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecayTime(pThis, &value))
            }
            return value
        }

        internal func put_DensityImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Density(pThis, value))
            }
        }

        internal func get_DensityImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Density(pThis, &value))
            }
            return value
        }

        internal func put_RoomSizeImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RoomSize(pThis, value))
            }
        }

        internal func get_RoomSizeImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RoomSize(pThis, &value))
            }
            return value
        }

        internal func put_DisableLateFieldImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DisableLateField(pThis, .init(from: value)))
            }
        }

        internal func get_DisableLateFieldImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinition.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisableLateField(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IReverbEffectDefinitionFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory }

        internal func CreateImpl(_ audioGraph: UWP.AudioGraph?) throws -> IReverbEffectDefinition {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CIReverbEffectDefinitionFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, RawPointer(audioGraph), &valueAbi))
                }
            }
            return IReverbEffectDefinition(value!)
        }

    }

    public class ISetDefaultSpatialAudioFormatResult: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult }

        internal func get_StatusImpl() throws -> UWP.SetDefaultSpatialAudioFormatStatus {
            var value: __x_ABI_CWindows_CMedia_CAudio_CSetDefaultSpatialAudioFormatStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISetDefaultSpatialAudioFormatResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &value))
            }
            return value
        }

    }

    public class ISpatialAudioDeviceConfiguration: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration }

        internal func get_DeviceIdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceId(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_IsSpatialAudioSupportedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSpatialAudioSupported(pThis, &value))
            }
            return .init(from: value)
        }

        internal func IsSpatialAudioFormatSupportedImpl(_ subtype: String) throws -> Bool {
            var result: boolean = 0
            let _subtype = try! HString(subtype)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsSpatialAudioFormatSupported(pThis, _subtype.get(), &result))
            }
            return .init(from: result)
        }

        internal func get_ActiveSpatialAudioFormatImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActiveSpatialAudioFormat(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DefaultSpatialAudioFormatImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultSpatialAudioFormat(pThis, &value))
            }
            return .init(from: value)
        }

        internal func SetDefaultSpatialAudioFormatAsyncImpl(_ subtype: String) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.SetDefaultSpatialAudioFormatResult?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _subtype = try! HString(subtype)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetDefaultSpatialAudioFormatAsync(pThis, _subtype.get(), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CMedia__CAudio__CSetDefaultSpatialAudioFormatResultWrapper.unwrapFrom(abi: operation)
        }

        internal func add_ConfigurationChangedImpl(_ handler: TypedEventHandler<UWP.SpatialAudioDeviceConfiguration?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CMedia__CAudio__CSpatialAudioDeviceConfiguration_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ConfigurationChanged(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ConfigurationChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfiguration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ConfigurationChanged(pThis, token))
            }
        }

    }

    public class ISpatialAudioDeviceConfigurationStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics }

        internal func GetForDeviceIdImpl(_ deviceId: String) throws -> UWP.SpatialAudioDeviceConfiguration? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _deviceId = try! HString(deviceId)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioDeviceConfigurationStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForDeviceId(pThis, _deviceId.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ISpatialAudioFormatConfiguration: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration }

        internal func ReportLicenseChangedAsyncImpl(_ subtype: String) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _subtype = try! HString(subtype)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReportLicenseChangedAsync(pThis, _subtype.get(), &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        internal func ReportConfigurationChangedAsyncImpl(_ subtype: String) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _subtype = try! HString(subtype)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReportConfigurationChangedAsync(pThis, _subtype.get(), &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        internal func get_MixedRealityExclusiveModePolicyImpl() throws -> UWP.MixedRealitySpatialAudioFormatPolicy {
            var value: __x_ABI_CWindows_CMedia_CAudio_CMixedRealitySpatialAudioFormatPolicy = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MixedRealityExclusiveModePolicy(pThis, &value))
            }
            return value
        }

        internal func put_MixedRealityExclusiveModePolicyImpl(_ value: UWP.MixedRealitySpatialAudioFormatPolicy) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfiguration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MixedRealityExclusiveModePolicy(pThis, value))
            }
        }

    }

    public class ISpatialAudioFormatConfigurationStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics }

        internal func GetDefaultImpl() throws -> UWP.SpatialAudioFormatConfiguration? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatConfigurationStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDefault(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ISpatialAudioFormatSubtypeStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics }

        internal func get_WindowsSonicImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WindowsSonic(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DolbyAtmosForHeadphonesImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DolbyAtmosForHeadphones(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DolbyAtmosForHomeTheaterImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DolbyAtmosForHomeTheater(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DolbyAtmosForSpeakersImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DolbyAtmosForSpeakers(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DTSHeadphoneXImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DTSHeadphoneX(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DTSXUltraImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CAudio_CISpatialAudioFormatSubtypeStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DTSXUltra(pThis, &value))
            }
            return .init(from: value)
        }

    }

}
